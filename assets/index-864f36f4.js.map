{"version":3,"file":"index-864f36f4.js","sources":["../../src/buildings/Building.ts","../../src/buildings/ResidentialBuilding.ts","../../src/buildings/ChurchBuilding.ts","../../src/buildings/IndustrialTank.ts","../../src/buildings/HighriseBuilding.ts","../../src/buildings/WaterTower.ts","../../src/main.ts"],"sourcesContent":["import * as THREE from 'three';\r\n\r\nexport abstract class Building {\r\n    protected mesh!: THREE.Object3D;\r\n    protected dirtyLevel: number = 100;\r\n    protected position: THREE.Vector3;\r\n\r\n    constructor(position: THREE.Vector3) {\r\n        this.position = position;\r\n    }\r\n\r\n    abstract createMesh(): void;\r\n\r\n    getMesh(): THREE.Object3D {\r\n        return this.mesh;\r\n    }\r\n\r\n    clean(amount: number): void {\r\n        this.dirtyLevel = Math.max(0, this.dirtyLevel - amount);\r\n        // Update material opacity based on dirt level\r\n        this.mesh.traverse((child) => {\r\n            if (child instanceof THREE.Mesh && child.material instanceof THREE.Material) {\r\n                if (child.material.transparent) {\r\n                    child.material.opacity = 0.3 + (this.dirtyLevel / 100) * 0.7;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getDirtLevel(): number {\r\n        return this.dirtyLevel;\r\n    }\r\n\r\n    isClean(): boolean {\r\n        return this.dirtyLevel === 0;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class ResidentialBuilding extends Building {\r\n    createMesh(): void {\r\n        const mansion = new THREE.Group();\r\n        \r\n        // Main building body\r\n        const mainBody = new THREE.Mesh(\r\n            new THREE.BoxGeometry(20, 15, 15),\r\n            new THREE.MeshPhongMaterial({ \r\n                color: 0xF5E6D3,\r\n                transparent: false,\r\n                opacity: 1\r\n            })\r\n        );\r\n\r\n        // Stone foundation\r\n        const foundation = new THREE.Mesh(\r\n            new THREE.BoxGeometry(21, 1, 16),\r\n            new THREE.MeshPhongMaterial({ \r\n                color: 0x7B7B7B\r\n            })\r\n        );\r\n        foundation.position.y = -7.5;\r\n\r\n        // Side wings\r\n        const leftWing = new THREE.Mesh(\r\n            new THREE.BoxGeometry(8, 8, 12),\r\n            new THREE.MeshPhongMaterial({ \r\n                color: 0xF5E6D3,\r\n                transparent: false,\r\n                opacity: 1\r\n            })\r\n        );\r\n        leftWing.position.set(-14, -2, 0);\r\n\r\n        const rightWing = leftWing.clone();\r\n        rightWing.position.set(14, -2, 0);\r\n\r\n        // Flat black roof with thicker height\r\n        const mainRoof = new THREE.Mesh(\r\n            new THREE.BoxGeometry(21, 2, 16),  // Increased height to 2\r\n            new THREE.MeshPhongMaterial({ \r\n                color: 0x000000,\r\n                transparent: false,\r\n                opacity: 1\r\n            })\r\n        );\r\n        mainRoof.position.y = 7.5;\r\n\r\n        // Create VWD text using box geometries\r\n        const letterMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0xFFFFFF,\r\n            transparent: false,\r\n            opacity: 1\r\n        });\r\n\r\n        // V\r\n        const vLeft = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2, 0.5),\r\n            letterMaterial\r\n        );\r\n        vLeft.position.set(-3, 7, 8.1);\r\n        vLeft.rotation.z = Math.PI * 0.1;\r\n        \r\n        const vRight = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2, 0.5),\r\n            letterMaterial\r\n        );\r\n        vRight.position.set(-2, 7, 8.1);\r\n        vRight.rotation.z = -Math.PI * 0.1;\r\n\r\n        // W\r\n        const w1 = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2.5, 0.5),  // Taller outer stroke\r\n            letterMaterial\r\n        );\r\n        w1.position.set(-0.8, 7, 8.1);\r\n        w1.rotation.z = Math.PI * 0.1;\r\n\r\n        const w2 = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 1.5, 0.5),  // Shorter inner stroke\r\n            letterMaterial\r\n        );\r\n        w2.position.set(0.2, 6.5, 8.1);  // Lowered position\r\n        w2.rotation.z = -Math.PI * 0.1;\r\n\r\n        const w3 = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 1.5, 0.5),  // Shorter inner stroke\r\n            letterMaterial\r\n        );\r\n        w3.position.set(1.2, 6.5, 8.1);  // Lowered position\r\n        w3.rotation.z = Math.PI * 0.1;\r\n\r\n        const w4 = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2.5, 0.5),  // Taller outer stroke\r\n            letterMaterial\r\n        );\r\n        w4.position.set(2.2, 7, 8.1);\r\n        w4.rotation.z = -Math.PI * 0.1;\r\n\r\n        // D\r\n        const dStem = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2.5, 0.5),\r\n            letterMaterial\r\n        );\r\n        dStem.position.set(3.8, 7, 8.1);\r\n\r\n        const dCurve = new THREE.Mesh(\r\n            new THREE.CylinderGeometry(1, 1.5, 0.5, 16, 1, false, -Math.PI/2, Math.PI),\r\n            letterMaterial\r\n        );\r\n        dCurve.rotation.x = Math.PI/2;\r\n        dCurve.rotation.y = Math.PI/2;\r\n        dCurve.position.set(3.8, 7, 8.1);\r\n\r\n        // Wing roofs (flat black and thicker)\r\n        const wingRoofGeometry = new THREE.BoxGeometry(9, 2, 13);  // Increased height to 2\r\n        const wingRoofMaterial = new THREE.MeshPhongMaterial({ color: 0x000000 });\r\n        const leftWingRoof = new THREE.Mesh(wingRoofGeometry, wingRoofMaterial);\r\n        leftWingRoof.position.set(-14, 2, 0);\r\n\r\n        const rightWingRoof = leftWingRoof.clone();\r\n        rightWingRoof.position.set(14, 2, 0);\r\n\r\n        // Windows\r\n        const windowGeometry = new THREE.BoxGeometry(2.5, 4, 0.2);\r\n        const windowMaterial = new THREE.MeshPhongMaterial({ \r\n            color: 0xADD8E6,\r\n            transparent: true,\r\n            opacity: 0.7\r\n        });\r\n\r\n        // Window frames\r\n        const frameGeometry = new THREE.BoxGeometry(3, 4.5, 0.3);\r\n        const frameMaterial = new THREE.MeshPhongMaterial({ color: 0xFFFFFF });\r\n\r\n        // Window positions\r\n        const windowPositions = [\r\n            // Front windows\r\n            [-7, 0, 7.6], [-2.3, 0, 7.6], [2.3, 0, 7.6], [7, 0, 7.6],\r\n            // Second floor front\r\n            [-7, 5, 7.6], [-2.3, 5, 7.6], [2.3, 5, 7.6], [7, 5, 7.6],\r\n            // Side windows\r\n            [-10.1, 0, 0], [-10.1, 5, 0], [10.1, 0, 0], [10.1, 5, 0],\r\n            // Wing windows\r\n            [-14, 0, 4], [-14, 0, -4], [14, 0, 4], [14, 0, -4]\r\n        ];\r\n\r\n        windowPositions.forEach((pos, index) => {\r\n            const frame = new THREE.Mesh(frameGeometry, frameMaterial);\r\n            const window = new THREE.Mesh(windowGeometry, windowMaterial);\r\n            \r\n            frame.position.set(pos[0], pos[1], pos[2]);\r\n            window.position.set(pos[0], pos[1], pos[2] + 0.1);\r\n            \r\n            if (index >= 8 && index < 12) {\r\n                frame.rotation.y = Math.PI / 2;\r\n                window.rotation.y = Math.PI / 2;\r\n            }\r\n            \r\n            mansion.add(frame);\r\n            mansion.add(window);\r\n        });\r\n\r\n        // Simple entrance\r\n        const entrance = new THREE.Mesh(\r\n            new THREE.BoxGeometry(6, 8, 1),\r\n            new THREE.MeshPhongMaterial({ color: 0xFFFFFF })\r\n        );\r\n        entrance.position.set(0, -2, 7.6);\r\n\r\n        // Add all elements\r\n        mansion.add(mainBody);\r\n        mansion.add(foundation);\r\n        mansion.add(leftWing);\r\n        mansion.add(rightWing);\r\n        mansion.add(mainRoof);\r\n        mansion.add(leftWingRoof);\r\n        mansion.add(rightWingRoof);\r\n        mansion.add(entrance);\r\n        mansion.add(vLeft);\r\n        mansion.add(vRight);\r\n        mansion.add(w1);\r\n        mansion.add(w2);\r\n        mansion.add(w3);\r\n        mansion.add(w4);  // Added fourth stroke for W\r\n        mansion.add(dStem);\r\n        mansion.add(dCurve);\r\n\r\n        // Position the mansion\r\n        mansion.position.copy(this.position);\r\n\r\n        this.mesh = mansion;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class ChurchBuilding extends Building {\r\n    createMesh(): void {\r\n        const church = new THREE.Group();\r\n\r\n        // Main church body (larger)\r\n        const body = new THREE.Mesh(\r\n            new THREE.BoxGeometry(10, 8, 16),\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0xF5F5DC, // Beige stone color\r\n                transparent: true,\r\n                opacity: 1\r\n            })\r\n        );\r\n\r\n        // Steeple base (taller)\r\n        const steepleBase = new THREE.Mesh(\r\n            new THREE.BoxGeometry(4, 12, 4),\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0xE8E8E8,\r\n                transparent: true,\r\n                opacity: 1\r\n            })\r\n        );\r\n        steepleBase.position.set(0, 10, -4);\r\n\r\n        // Steeple roof (taller pyramid)\r\n        const steepleRoofGeometry = new THREE.ConeGeometry(3, 6, 4);\r\n        const steepleRoof = new THREE.Mesh(\r\n            steepleRoofGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x8B4513,\r\n                transparent: true,\r\n                opacity: 1\r\n            })\r\n        );\r\n        steepleRoof.position.set(0, 19, -4);\r\n\r\n        // Larger cross\r\n        const crossVertical = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.4, 2, 0.4),\r\n            new THREE.MeshPhongMaterial({ color: 0xFFD700 })\r\n        );\r\n        const crossHorizontal = new THREE.Mesh(\r\n            new THREE.BoxGeometry(1.2, 0.4, 0.4),\r\n            new THREE.MeshPhongMaterial({ color: 0xFFD700 })\r\n        );\r\n        const cross = new THREE.Group();\r\n        cross.add(crossVertical);\r\n        cross.add(crossHorizontal);\r\n        cross.position.set(0, 23, -4);\r\n\r\n        // Larger, more ornate windows\r\n        const windowGeometry = new THREE.BoxGeometry(1.2, 4, 0.2);\r\n        const windowMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x87CEEB,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n\r\n        // Add windows on both sides\r\n        for (let i = -5; i <= 5; i += 5) {\r\n            const leftWindow = new THREE.Mesh(windowGeometry, windowMaterial);\r\n            leftWindow.position.set(-5.1, 0, i);\r\n            leftWindow.rotation.y = Math.PI / 2;\r\n            church.add(leftWindow);\r\n\r\n            const rightWindow = new THREE.Mesh(windowGeometry, windowMaterial);\r\n            rightWindow.position.set(5.1, 0, i);\r\n            rightWindow.rotation.y = Math.PI / 2;\r\n            church.add(rightWindow);\r\n        }\r\n\r\n        // Large front window (rose window)\r\n        const roseWindowGeometry = new THREE.CylinderGeometry(2, 2, 0.2, 16);\r\n        const roseWindow = new THREE.Mesh(\r\n            roseWindowGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x87CEEB,\r\n                transparent: true,\r\n                opacity: 0.8\r\n            })\r\n        );\r\n        roseWindow.rotation.x = Math.PI / 2;\r\n        roseWindow.position.set(0, 4, 8.1);\r\n\r\n        // Main door (larger, more ornate)\r\n        const doorFrame = new THREE.Mesh(\r\n            new THREE.BoxGeometry(4, 6, 0.5),\r\n            new THREE.MeshPhongMaterial({ color: 0x8B4513 })\r\n        );\r\n        doorFrame.position.set(0, -1, 8.1);\r\n\r\n        const door = new THREE.Mesh(\r\n            new THREE.BoxGeometry(3.6, 5.6, 0.2),\r\n            new THREE.MeshPhongMaterial({ color: 0x4A3520 })\r\n        );\r\n        door.position.set(0, -1, 8.3);\r\n\r\n        // Steps\r\n        const steps = new THREE.Mesh(\r\n            new THREE.BoxGeometry(6, 1, 2),\r\n            new THREE.MeshPhongMaterial({ color: 0x808080 })\r\n        );\r\n        steps.position.set(0, -4, 9);\r\n\r\n        // Roof details\r\n        const roofGeometry = new THREE.BoxGeometry(11, 0.5, 17);\r\n        const roof = new THREE.Mesh(\r\n            roofGeometry,\r\n            new THREE.MeshPhongMaterial({ color: 0x8B4513 })\r\n        );\r\n        roof.position.y = 4.25;\r\n\r\n        // Combine all elements\r\n        church.add(body);\r\n        church.add(steepleBase);\r\n        church.add(steepleRoof);\r\n        church.add(cross);\r\n        church.add(doorFrame);\r\n        church.add(door);\r\n        church.add(steps);\r\n        church.add(roof);\r\n        church.add(roseWindow);\r\n\r\n        // Position the church\r\n        church.position.copy(this.position);\r\n\r\n        this.mesh = church;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class IndustrialTank extends Building {\r\n    createMesh(): void {\r\n        const silo = new THREE.Group();\r\n\r\n        // Main cylindrical body (taller and wider)\r\n        const cylinderGeometry = new THREE.CylinderGeometry(3, 3, 15, 32);\r\n        const siloBody = new THREE.Mesh(\r\n            cylinderGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0xC0C0C0, // Lighter silver color\r\n                transparent: true,\r\n                opacity: 1,\r\n                shininess: 100\r\n            })\r\n        );\r\n\r\n        // Conical top\r\n        const coneGeometry = new THREE.ConeGeometry(3, 4, 32);\r\n        const cone = new THREE.Mesh(\r\n            coneGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0xB8B8B8,\r\n                transparent: true,\r\n                opacity: 1,\r\n                shininess: 100\r\n            })\r\n        );\r\n        cone.position.y = 9.5;\r\n\r\n        // Base ring\r\n        const baseRingGeometry = new THREE.TorusGeometry(3.2, 0.3, 16, 32);\r\n        const baseRing = new THREE.Mesh(\r\n            baseRingGeometry,\r\n            new THREE.MeshPhongMaterial({ color: 0x808080 })\r\n        );\r\n        baseRing.rotation.x = Math.PI / 2;\r\n        baseRing.position.y = -7.5;\r\n\r\n        // Top ring\r\n        const topRing = baseRing.clone();\r\n        topRing.position.y = 7.5;\r\n\r\n        // Support structure\r\n        const supportGeometry = new THREE.CylinderGeometry(3.5, 4.5, 2, 8);\r\n        const support = new THREE.Mesh(\r\n            supportGeometry,\r\n            new THREE.MeshPhongMaterial({ color: 0x606060 })\r\n        );\r\n        support.position.y = -8;\r\n\r\n        // Add vertical detail lines\r\n        for (let i = 0; i < 8; i++) {\r\n            const angle = (i / 8) * Math.PI * 2;\r\n            const detailGeometry = new THREE.BoxGeometry(0.2, 15, 0.2);\r\n            const detail = new THREE.Mesh(\r\n                detailGeometry,\r\n                new THREE.MeshPhongMaterial({ color: 0xA8A8A8 })\r\n            );\r\n            detail.position.set(\r\n                Math.cos(angle) * 3.1,\r\n                0,\r\n                Math.sin(angle) * 3.1\r\n            );\r\n            silo.add(detail);\r\n        }\r\n\r\n        // Add all elements to the silo group\r\n        silo.add(siloBody);\r\n        silo.add(cone);\r\n        silo.add(baseRing);\r\n        silo.add(topRing);\r\n        silo.add(support);\r\n\r\n        // Position the silo\r\n        silo.position.copy(this.position);\r\n\r\n        this.mesh = silo;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class HighriseBuilding extends Building {\r\n    createMesh(): void {\r\n        const building = new THREE.Group();\r\n\r\n        // Main building body\r\n        const bodyGeometry = new THREE.BoxGeometry(12, 40, 12);\r\n        const bodyMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x2F4F4F, // Dark slate gray\r\n            transparent: true,\r\n            opacity: 1,\r\n            shininess: 100\r\n        });\r\n        const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\r\n\r\n        // Glass panels for modern look\r\n        const glassGeometry = new THREE.PlaneGeometry(11, 38);\r\n        const glassMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x4682B4, // Steel blue\r\n            transparent: true,\r\n            opacity: 0.6,\r\n            shininess: 100,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        // Add glass panels to all four sides\r\n        const frontGlass = new THREE.Mesh(glassGeometry, glassMaterial);\r\n        frontGlass.position.set(0, 0, 6.01);\r\n        \r\n        const backGlass = new THREE.Mesh(glassGeometry, glassMaterial);\r\n        backGlass.position.set(0, 0, -6.01);\r\n        backGlass.rotation.y = Math.PI;\r\n\r\n        const leftGlass = new THREE.Mesh(glassGeometry, glassMaterial);\r\n        leftGlass.position.set(-6.01, 0, 0);\r\n        leftGlass.rotation.y = -Math.PI / 2;\r\n\r\n        const rightGlass = new THREE.Mesh(glassGeometry, glassMaterial);\r\n        rightGlass.position.set(6.01, 0, 0);\r\n        rightGlass.rotation.y = Math.PI / 2;\r\n\r\n        // Add horizontal dividers for floors\r\n        const floorCount = 12;\r\n        const floorSpacing = 3;\r\n        for (let i = 0; i < floorCount; i++) {\r\n            const y = -18 + (i * floorSpacing);\r\n            const divider = new THREE.Mesh(\r\n                new THREE.BoxGeometry(12.1, 0.2, 12.1),\r\n                new THREE.MeshPhongMaterial({ color: 0x4A4A4A })\r\n            );\r\n            divider.position.y = y;\r\n            building.add(divider);\r\n        }\r\n\r\n        // Add vertical supports\r\n        const supportPositions = [\r\n            [-5.5, 0, 6], [5.5, 0, 6],    // Front\r\n            [-5.5, 0, -6], [5.5, 0, -6],  // Back\r\n            [-6, 0, -5.5], [-6, 0, 5.5],  // Left\r\n            [6, 0, -5.5], [6, 0, 5.5]     // Right\r\n        ];\r\n\r\n        supportPositions.forEach(pos => {\r\n            const support = new THREE.Mesh(\r\n                new THREE.BoxGeometry(0.3, 40, 0.3),\r\n                new THREE.MeshPhongMaterial({ color: 0x2F4F4F })\r\n            );\r\n            support.position.set(pos[0], 0, pos[1]);\r\n            building.add(support);\r\n        });\r\n\r\n        // Modern roof structure\r\n        const roofBase = new THREE.Mesh(\r\n            new THREE.BoxGeometry(13, 1, 13),\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x4A4A4A,\r\n                shininess: 50\r\n            })\r\n        );\r\n        roofBase.position.y = 20.5;\r\n\r\n        // Roof details\r\n        const roofDetail = new THREE.Mesh(\r\n            new THREE.BoxGeometry(8, 3, 8),\r\n            new THREE.MeshPhongMaterial({ color: 0x2F4F4F })\r\n        );\r\n        roofDetail.position.y = 22;\r\n\r\n        // Modern entrance\r\n        const entranceBase = new THREE.Mesh(\r\n            new THREE.BoxGeometry(8, 4, 2),\r\n            new THREE.MeshPhongMaterial({ color: 0x4A4A4A })\r\n        );\r\n        entranceBase.position.set(0, -18, 7);\r\n\r\n        const entranceRoof = new THREE.Mesh(\r\n            new THREE.BoxGeometry(8, 0.3, 3),\r\n            new THREE.MeshPhongMaterial({ color: 0x2F4F4F })\r\n        );\r\n        entranceRoof.position.set(0, -16, 7.5);\r\n\r\n        // Glass door\r\n        const door = new THREE.Mesh(\r\n            new THREE.PlaneGeometry(6, 3.5),\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x4682B4,\r\n                transparent: true,\r\n                opacity: 0.8,\r\n                side: THREE.DoubleSide\r\n            })\r\n        );\r\n        door.position.set(0, -18, 8.1);\r\n\r\n        // Combine all elements\r\n        building.add(body);\r\n        building.add(frontGlass);\r\n        building.add(backGlass);\r\n        building.add(leftGlass);\r\n        building.add(rightGlass);\r\n        building.add(roofBase);\r\n        building.add(roofDetail);\r\n        building.add(entranceBase);\r\n        building.add(entranceRoof);\r\n        building.add(door);\r\n\r\n        // Position the building\r\n        building.position.copy(this.position);\r\n\r\n        this.mesh = building;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class WaterTower extends Building {\r\n    createMesh(): void {\r\n        const tower = new THREE.Group();\r\n\r\n        // Main tank (larger and more cylindrical)\r\n        const tankGeometry = new THREE.CylinderGeometry(4, 4, 6, 32);\r\n        const tankMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x505050, // Darker gray\r\n            transparent: true,\r\n            opacity: 1,\r\n            shininess: 60\r\n        });\r\n        const tank = new THREE.Mesh(tankGeometry, tankMaterial);\r\n        tank.position.y = 15;\r\n\r\n        // Bottom curved part of tank\r\n        const bottomCurveGeometry = new THREE.SphereGeometry(4, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2);\r\n        const bottomCurve = new THREE.Mesh(bottomCurveGeometry, tankMaterial);\r\n        bottomCurve.position.y = 12;\r\n\r\n        // Top curved part of tank\r\n        const topCurveGeometry = new THREE.SphereGeometry(4, 32, 16, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2);\r\n        const topCurve = new THREE.Mesh(topCurveGeometry, tankMaterial);\r\n        topCurve.position.y = 18;\r\n\r\n        // Conical roof with overhang\r\n        const roofGeometry = new THREE.ConeGeometry(4.5, 2.5, 32);\r\n        const roofMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x8B0000, // Dark red\r\n            shininess: 30\r\n        });\r\n        const roof = new THREE.Mesh(roofGeometry, roofMaterial);\r\n        roof.position.y = 19.5;\r\n\r\n        // Central support column\r\n        const centralColumnGeometry = new THREE.CylinderGeometry(0.8, 0.8, 24, 12);\r\n        const supportMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x2F2F2F,\r\n            shininess: 30\r\n        });\r\n        const centralColumn = new THREE.Mesh(centralColumnGeometry, supportMaterial);\r\n        centralColumn.position.y = 0;\r\n\r\n        // Main support beams (thicker and more detailed)\r\n        const mainSupportPositions = [\r\n            [-2.5, 0, -2.5],\r\n            [2.5, 0, -2.5],\r\n            [-2.5, 0, 2.5],\r\n            [2.5, 0, 2.5]\r\n        ];\r\n\r\n        mainSupportPositions.forEach(pos => {\r\n            const support = new THREE.Mesh(\r\n                new THREE.CylinderGeometry(0.4, 0.4, 24, 8),\r\n                supportMaterial\r\n            );\r\n            support.position.set(pos[0], 0, pos[1]);\r\n            tower.add(support);\r\n        });\r\n\r\n        // Add horizontal support rings at different heights\r\n        const ringHeights = [-6, -2, 2, 6, 10];\r\n        ringHeights.forEach(height => {\r\n            const ring = new THREE.Mesh(\r\n                new THREE.TorusGeometry(3.5, 0.2, 16, 32),\r\n                supportMaterial\r\n            );\r\n            ring.rotation.x = Math.PI / 2;\r\n            ring.position.y = height;\r\n            tower.add(ring);\r\n        });\r\n\r\n        // Add diagonal cross braces\r\n        const braceGeometry = new THREE.CylinderGeometry(0.15, 0.15, 7.5, 8);\r\n        const braceHeights = [-4, 0, 4, 8];\r\n        \r\n        braceHeights.forEach(height => {\r\n            // Create X-shaped braces on all four sides\r\n            for (let rotation = 0; rotation < Math.PI * 2; rotation += Math.PI/2) {\r\n                const brace1 = new THREE.Mesh(braceGeometry, supportMaterial);\r\n                brace1.position.y = height;\r\n                brace1.rotation.z = Math.PI / 4;\r\n                brace1.rotation.y = rotation;\r\n                tower.add(brace1);\r\n\r\n                const brace2 = new THREE.Mesh(braceGeometry, supportMaterial);\r\n                brace2.position.y = height;\r\n                brace2.rotation.z = -Math.PI / 4;\r\n                brace2.rotation.y = rotation;\r\n                tower.add(brace2);\r\n            }\r\n        });\r\n\r\n        // Add maintenance platform\r\n        const platformGeometry = new THREE.CylinderGeometry(4.5, 4.5, 0.3, 32);\r\n        const platform = new THREE.Mesh(platformGeometry, supportMaterial);\r\n        platform.position.y = 11;\r\n\r\n        // Add railing to the platform\r\n        const railingGeometry = new THREE.TorusGeometry(4.5, 0.05, 8, 32);\r\n        const railing = new THREE.Mesh(railingGeometry, supportMaterial);\r\n        railing.rotation.x = Math.PI / 2;\r\n        railing.position.y = 12;\r\n\r\n        // Add vertical railing supports\r\n        for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 8) {\r\n            const railSupport = new THREE.Mesh(\r\n                new THREE.CylinderGeometry(0.05, 0.05, 1, 4),\r\n                supportMaterial\r\n            );\r\n            railSupport.position.set(\r\n                4.5 * Math.cos(angle),\r\n                11.5,\r\n                4.5 * Math.sin(angle)\r\n            );\r\n            tower.add(railSupport);\r\n        }\r\n\r\n        // Add access ladder\r\n        const ladderHeight = 24;\r\n        const ladderWidth = 0.6;\r\n        const rungSpacing = 1;\r\n\r\n        // Ladder side rails\r\n        const sideRailGeometry = new THREE.CylinderGeometry(0.05, 0.05, ladderHeight, 4);\r\n        const leftRail = new THREE.Mesh(sideRailGeometry, supportMaterial);\r\n        const rightRail = new THREE.Mesh(sideRailGeometry, supportMaterial);\r\n        leftRail.position.set(-ladderWidth/2, ladderHeight/2 - 12, 4.2);\r\n        rightRail.position.set(ladderWidth/2, ladderHeight/2 - 12, 4.2);\r\n        tower.add(leftRail);\r\n        tower.add(rightRail);\r\n\r\n        // Ladder rungs\r\n        for (let i = 0; i < ladderHeight; i += rungSpacing) {\r\n            const rung = new THREE.Mesh(\r\n                new THREE.CylinderGeometry(0.025, 0.025, ladderWidth, 4),\r\n                supportMaterial\r\n            );\r\n            rung.rotation.x = Math.PI / 2;\r\n            rung.position.set(0, i - 12, 4.2);\r\n            tower.add(rung);\r\n        }\r\n\r\n        // Add all main elements\r\n        tower.add(tank);\r\n        tower.add(bottomCurve);\r\n        tower.add(topCurve);\r\n        tower.add(roof);\r\n        tower.add(centralColumn);\r\n        tower.add(platform);\r\n        tower.add(railing);\r\n\r\n        // Position the tower\r\n        tower.position.copy(this.position);\r\n\r\n        this.mesh = tower;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { ResidentialBuilding } from './buildings/ResidentialBuilding';\r\nimport { ChurchBuilding } from './buildings/ChurchBuilding';\r\nimport { IndustrialTank } from './buildings/IndustrialTank';\r\nimport { HighriseBuilding } from './buildings/HighriseBuilding';\r\nimport { Building } from './buildings/Building';\r\nimport { WaterTower } from './buildings/WaterTower';\r\n\r\nclass Game {\r\n    private scene: THREE.Scene;\r\n    private camera: THREE.PerspectiveCamera;\r\n    private fpvCamera: THREE.PerspectiveCamera;\r\n    private followCamera: THREE.PerspectiveCamera;\r\n    private activeCamera: THREE.PerspectiveCamera;\r\n    private renderer: THREE.WebGLRenderer;\r\n    private drone: THREE.Object3D | null = null;\r\n    private buildings: Building[] = [];\r\n    private controls: OrbitControls;\r\n    private cleaningRadius = 2;\r\n    private cleaningPower = 1;\r\n    private isSprayOn: boolean = false;\r\n    private spraySystem: THREE.Points | null = null;\r\n    private propellers: THREE.Object3D[] = [];\r\n    private propellerSpeed = 1.1;\r\n    private warningTimeout: number | null = null;\r\n    private cameraMode: 'orbit' | 'fpv' | 'follow' = 'follow';\r\n    private keysPressed: { [key: string]: boolean } = {};\r\n    private lastFrameTime: number = performance.now();\r\n    private logos: THREE.Mesh[] = [];\r\n    private score: number = 0;\r\n    private hasWon: boolean = false;\r\n    private gameStarted: boolean = false;\r\n    private gameMode: 'learning' | 'speed' | null = null;\r\n    private startScreenContainer: HTMLDivElement | null = null;\r\n\r\n    constructor() {\r\n        // Scene setup\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background = new THREE.Color(0x87ceeb); // Sky blue\r\n\r\n        // Orbit camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            75,\r\n            window.innerWidth / window.innerHeight,\r\n            0.1,\r\n            1000\r\n        );\r\n        this.camera.position.set(0, 15, 30);\r\n\r\n        // FPV camera\r\n        this.fpvCamera = new THREE.PerspectiveCamera(\r\n            90,\r\n            window.innerWidth / window.innerHeight,\r\n            0.1,\r\n            1000\r\n        );\r\n\r\n        // Follow camera\r\n        this.followCamera = new THREE.PerspectiveCamera(\r\n            75,\r\n            window.innerWidth / window.innerHeight,\r\n            0.1,\r\n            1000\r\n        );\r\n        this.activeCamera = this.followCamera;\r\n\r\n        // Renderer setup\r\n        this.renderer = new THREE.WebGLRenderer({ \r\n            antialias: true,\r\n            alpha: true,\r\n            powerPreference: \"default\"\r\n        });\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        this.renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n        this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n        this.renderer.toneMappingExposure = 1.0;\r\n        document.body.appendChild(this.renderer.domElement);\r\n\r\n        // Create and show start screen immediately\r\n        this.createStartScreen();\r\n\r\n        // Orbit controls (disabled initially in follow mode)\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.controls.enableDamping = true;\r\n        this.controls.dampingFactor = 0.05;\r\n        this.controls.maxPolarAngle = Math.PI / 2;\r\n        this.controls.minDistance = 5;\r\n        this.controls.maxDistance = 100;\r\n        this.controls.enabled = false;\r\n\r\n        // Start animation loop\r\n        this.animate();\r\n    }\r\n\r\n    private createStartScreen(): void {\r\n        // Create container\r\n        this.startScreenContainer = document.createElement('div');\r\n        this.startScreenContainer.style.position = 'fixed';\r\n        this.startScreenContainer.style.top = '0';\r\n        this.startScreenContainer.style.left = '0';\r\n        this.startScreenContainer.style.width = '100%';\r\n        this.startScreenContainer.style.height = '100%';\r\n        this.startScreenContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.startScreenContainer.style.display = 'flex';\r\n        this.startScreenContainer.style.flexDirection = 'column';\r\n        this.startScreenContainer.style.alignItems = 'center';\r\n        this.startScreenContainer.style.justifyContent = 'center';\r\n        this.startScreenContainer.style.zIndex = '1000';\r\n\r\n        // Add logo\r\n        const logo = document.createElement('img');\r\n        logo.src = import.meta.env.BASE_URL + 'start.png';\r\n        logo.style.width = '400px';\r\n        logo.style.marginBottom = '40px';\r\n        this.startScreenContainer.appendChild(logo);\r\n\r\n        // Create mode buttons container\r\n        const buttonsContainer = document.createElement('div');\r\n        buttonsContainer.style.display = 'flex';\r\n        buttonsContainer.style.flexDirection = 'column';\r\n        buttonsContainer.style.gap = '20px';\r\n\r\n        // Learning Mode Button\r\n        const learningButton = this.createModeButton(\r\n            'Learning Mode',\r\n            'Learn about Lucid Bots while flying the drone',\r\n            'learning'\r\n        );\r\n        buttonsContainer.appendChild(learningButton);\r\n\r\n        // Speed Mode Button\r\n        const speedButton = this.createModeButton(\r\n            'Speed Mode',\r\n            'Test your drone piloting skills',\r\n            'speed'\r\n        );\r\n        buttonsContainer.appendChild(speedButton);\r\n\r\n        this.startScreenContainer.appendChild(buttonsContainer);\r\n        document.body.appendChild(this.startScreenContainer);\r\n    }\r\n\r\n    private createModeButton(title: string, description: string, mode: 'learning' | 'speed'): HTMLDivElement {\r\n        const button = document.createElement('div');\r\n        button.style.backgroundColor = '#00B4D8';\r\n        button.style.padding = '20px 40px';\r\n        button.style.borderRadius = '10px';\r\n        button.style.cursor = 'pointer';\r\n        button.style.textAlign = 'center';\r\n        button.style.transition = 'transform 0.2s, background-color 0.2s';\r\n        button.style.width = '400px';\r\n\r\n        const titleElement = document.createElement('h2');\r\n        titleElement.textContent = title;\r\n        titleElement.style.color = 'white';\r\n        titleElement.style.margin = '0 0 10px 0';\r\n        titleElement.style.fontFamily = 'Arial, sans-serif';\r\n\r\n        const descElement = document.createElement('p');\r\n        descElement.textContent = description;\r\n        descElement.style.color = 'white';\r\n        descElement.style.margin = '0';\r\n        descElement.style.fontFamily = 'Arial, sans-serif';\r\n\r\n        button.appendChild(titleElement);\r\n        button.appendChild(descElement);\r\n\r\n        // Hover effects\r\n        button.onmouseover = () => {\r\n            button.style.backgroundColor = '#0096B4';\r\n            button.style.transform = 'scale(1.05)';\r\n        };\r\n        button.onmouseout = () => {\r\n            button.style.backgroundColor = '#00B4D8';\r\n            button.style.transform = 'scale(1)';\r\n        };\r\n\r\n        // Click handler\r\n        button.onclick = () => this.startGame(mode);\r\n\r\n        return button;\r\n    }\r\n\r\n    private startGame(mode: 'learning' | 'speed'): void {\r\n        this.gameMode = mode;\r\n        this.gameStarted = true;\r\n        \r\n        // Remove start screen\r\n        if (this.startScreenContainer) {\r\n            document.body.removeChild(this.startScreenContainer);\r\n            this.startScreenContainer = null;\r\n        }\r\n\r\n        // Initialize game components\r\n        this.setupLighting();\r\n        this.setupControlsUI();\r\n        this.loadDroneModel();\r\n        this.addBuildings();\r\n        this.addGround();\r\n        this.addLogos();\r\n        this.updateScoreDisplay();\r\n        this.createWarningPopup();\r\n\r\n        // Add event listeners\r\n        window.addEventListener('resize', this.onWindowResize.bind(this));\r\n        document.addEventListener('keydown', this.onKeyDown.bind(this));\r\n        document.addEventListener('keyup', this.onKeyUp.bind(this));\r\n\r\n        // Update UI based on game mode\r\n        this.updateUIForGameMode();\r\n    }\r\n\r\n    private updateUIForGameMode(): void {\r\n        const infoElement = document.getElementById('info');\r\n        if (!infoElement) return;\r\n\r\n        if (this.gameMode === 'learning') {\r\n            infoElement.innerHTML += `\r\n                <div style=\"margin-top: 10px; padding-top: 10px; border-top: 1px solid white;\">\r\n                    <p style=\"margin: 0;\">Learning Mode: Collect logos to learn about Lucid Bots!</p>\r\n                </div>\r\n            `;\r\n        } else {\r\n            infoElement.innerHTML += `\r\n                <div style=\"margin-top: 10px; padding-top: 10px; border-top: 1px solid white;\">\r\n                    <p style=\"margin: 0;\">Speed Mode: Collect all logos as fast as you can!</p>\r\n                    <p id=\"timer\" style=\"margin: 5px 0 0 0;\">Time: 0:00</p>\r\n                </div>\r\n            `;\r\n            this.startSpeedModeTimer();\r\n        }\r\n    }\r\n\r\n    private startSpeedModeTimer(): void {\r\n        if (this.gameMode !== 'speed') return;\r\n        \r\n        const startTime = Date.now();\r\n        const timerElement = document.getElementById('timer');\r\n        \r\n        const updateTimer = () => {\r\n            if (!this.hasWon && timerElement) {\r\n                const elapsed = Math.floor((Date.now() - startTime) / 1000);\r\n                const minutes = Math.floor(elapsed / 60);\r\n                const seconds = elapsed % 60;\r\n                timerElement.textContent = `Time: ${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n                requestAnimationFrame(updateTimer);\r\n            }\r\n        };\r\n        \r\n        updateTimer();\r\n    }\r\n\r\n    private setupLighting(): void {\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n        this.scene.add(ambientLight);\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n        directionalLight.position.set(50, 50, 50);\r\n        directionalLight.castShadow = true;\r\n        directionalLight.shadow.mapSize.width = 2048;\r\n        directionalLight.shadow.mapSize.height = 2048;\r\n        directionalLight.shadow.camera.near = 0.5;\r\n        directionalLight.shadow.camera.far = 500;\r\n        this.scene.add(directionalLight);\r\n\r\n        const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444, 0.6);\r\n        this.scene.add(hemisphereLight);\r\n    }\r\n\r\n    // Creates a fixed, styled UI panel for game controls and score.\r\n    private setupControlsUI(): void {\r\n        let infoElement = document.getElementById('info');\r\n        if (!infoElement) {\r\n            infoElement = document.createElement('div');\r\n            infoElement.id = 'info';\r\n            document.body.appendChild(infoElement);\r\n        }\r\n        infoElement.style.position = 'fixed';\r\n        infoElement.style.top = '10px';\r\n        infoElement.style.right = '10px';\r\n        infoElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n        infoElement.style.color = 'white';\r\n        infoElement.style.padding = '10px';\r\n        infoElement.style.borderRadius = '8px';\r\n        infoElement.style.fontFamily = 'Arial, sans-serif';\r\n        infoElement.innerHTML = `\r\n            <h3 style=\"margin:0; font-size:18px;\">Game Controls</h3>\r\n            <ul style=\"list-style:none; padding:0; margin:5px 0;\">\r\n                <li>Arrow Keys: Move Drone</li>\r\n                <li>A/D: Yaw Left/Right</li>\r\n                <li>W/S: Up/Down</li>\r\n                <li>Space: Toggle Sprayer</li>\r\n                <li>C: Clean (when sprayer is on)</li>\r\n                <li>V: Toggle Camera</li>\r\n                <li>Mouse: Orbit Camera (if enabled)</li>\r\n            </ul>\r\n            <p id=\"score-display\" style=\"margin:0; font-weight:bold;\">Score: 0/5 Logos Collected!</p>\r\n        `;\r\n    }\r\n\r\n    private loadDroneModel(): void {\r\n        const dracoLoader = new DRACOLoader();\r\n        dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\r\n        const loader = new GLTFLoader();\r\n        loader.setDRACOLoader(dracoLoader);\r\n\r\n        console.log('Attempting to load drone model...');\r\n        loader.load(import.meta.env.BASE_URL + 'sherpaModel.glb', (gltf: GLTF) => {\r\n            console.log('Drone model loaded successfully:', gltf);\r\n            if (gltf.scene) {\r\n                const droneHolder = new THREE.Object3D();\r\n                const droneModel = gltf.scene;\r\n                // Rotate so it faces forward\r\n                droneModel.rotation.x = -Math.PI / 2;\r\n                droneModel.scale.set(0.5, 0.5, 0.5);\r\n                \r\n                // Traverse to set shadow properties and find propellers\r\n                droneModel.traverse((child) => {\r\n                    if (child instanceof THREE.Mesh) {\r\n                        child.castShadow = true;\r\n                        child.receiveShadow = true;\r\n                        if (child.material && child.material.transparent) {\r\n                            child.material.opacity = 0.9;\r\n                            child.material.side = THREE.DoubleSide;\r\n                        }\r\n                        if (child.name.toLowerCase().includes('propeller') || \r\n                            child.name.toLowerCase().includes('prop') || \r\n                            child.name.toLowerCase().includes('rotor')) {\r\n                            console.log('Found propeller:', child.name);\r\n                            this.propellers.push(child);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                droneHolder.add(droneModel);\r\n                droneHolder.position.set(0, 5, 0);\r\n\r\n                // Add drone lights\r\n                const droneSpotLight = new THREE.SpotLight(0xffffff, 1);\r\n                droneSpotLight.position.set(0, 0.5, 0);\r\n                droneSpotLight.angle = Math.PI / 6;\r\n                droneSpotLight.penumbra = 0.5;\r\n                droneSpotLight.decay = 2;\r\n                droneSpotLight.distance = 10;\r\n                droneHolder.add(droneSpotLight);\r\n                const dronePointLight = new THREE.PointLight(0xffffff, 0.5, 5);\r\n                droneHolder.add(dronePointLight);\r\n\r\n                this.drone = droneHolder;\r\n                this.scene.add(this.drone);\r\n                console.log('Drone added to scene at position:', this.drone.position);\r\n\r\n                dracoLoader.dispose();\r\n            } else {\r\n                console.error('No scene found in the loaded model');\r\n            }\r\n        },\r\n        (progress) => {\r\n            const percentComplete = Math.round((progress.loaded / progress.total) * 100);\r\n            console.log(`Loading progress: ${percentComplete}%`);\r\n        },\r\n        (error) => {\r\n            console.error('Error loading drone model:', error);\r\n            const droneHolder = new THREE.Object3D();\r\n            const geometry = new THREE.BoxGeometry(2, 1, 2);\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: 0x3366ff,\r\n                transparent: true,\r\n                opacity: 0.8\r\n            });\r\n            const fallbackCube = new THREE.Mesh(geometry, material);\r\n            droneHolder.add(fallbackCube);\r\n            droneHolder.position.set(0, 5, 0);\r\n            const droneLight = new THREE.PointLight(0xffffff, 0.5, 10);\r\n            droneHolder.add(droneLight);\r\n            this.drone = droneHolder;\r\n            this.scene.add(this.drone);\r\n            console.log('Fallback drone cube added to scene');\r\n        });\r\n    }\r\n\r\n    private addBuildings(): void {\r\n        const house = new ResidentialBuilding(new THREE.Vector3(-20, 3, -15));\r\n        house.createMesh();\r\n        this.scene.add(house.getMesh());\r\n        this.buildings.push(house);\r\n\r\n        const church = new ChurchBuilding(new THREE.Vector3(20, 4, -15));\r\n        church.createMesh();\r\n        this.scene.add(church.getMesh());\r\n        this.buildings.push(church);\r\n\r\n        const tank = new IndustrialTank(new THREE.Vector3(-20, 8, 15));\r\n        tank.createMesh();\r\n        this.scene.add(tank.getMesh());\r\n        this.buildings.push(tank);\r\n\r\n        const highrise = new HighriseBuilding(new THREE.Vector3(20, 20, 15));\r\n        highrise.createMesh();\r\n        this.scene.add(highrise.getMesh());\r\n        this.buildings.push(highrise);\r\n\r\n        const waterTower = new WaterTower(new THREE.Vector3(-40, 12, -35));\r\n        waterTower.createMesh();\r\n        this.scene.add(waterTower.getMesh());\r\n        this.buildings.push(waterTower);\r\n    }\r\n\r\n    private addGround(): void {\r\n        const groundGeometry = new THREE.PlaneGeometry(100, 100);\r\n        const groundMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x90EE90,\r\n            side: THREE.DoubleSide\r\n        });\r\n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n        ground.rotation.x = -Math.PI / 2;\r\n        ground.receiveShadow = true;\r\n        this.scene.add(ground);\r\n    }\r\n\r\n    private onWindowResize(): void {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight;\r\n        this.camera.updateProjectionMatrix();\r\n        this.fpvCamera.aspect = window.innerWidth / window.innerHeight;\r\n        this.fpvCamera.updateProjectionMatrix();\r\n        this.followCamera.aspect = window.innerWidth / window.innerHeight;\r\n        this.followCamera.updateProjectionMatrix();\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    private onKeyDown(event: KeyboardEvent): void {\r\n        this.keysPressed[event.key.toLowerCase()] = true;\r\n        switch (event.key.toLowerCase()) {\r\n            case ' ':\r\n                // Toggle the sprayer\r\n                this.isSprayOn = !this.isSprayOn;\r\n                if (this.isSprayOn && !this.spraySystem) {\r\n                    this.createSpraySystem();\r\n                }\r\n                break;\r\n            case 'c':\r\n                if (this.isSprayOn) {\r\n                    this.clean();\r\n                }\r\n                break;\r\n            case 'v':\r\n                this.toggleCamera();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onKeyUp(event: KeyboardEvent): void {\r\n        this.keysPressed[event.key.toLowerCase()] = false;\r\n    }\r\n\r\n    // Drone movement using a smaller bounding sphere for collision.\r\n    private updateDroneMovement(delta: number): void {\r\n        if (!this.drone) return;\r\n\r\n        const translationSpeed = 5;\r\n        const rotationSpeed = 1.5;\r\n        const droneRadius = 0.8;\r\n\r\n        // Yaw rotation (A/D)\r\n        if (this.keysPressed['a']) {\r\n            this.drone.rotation.y += rotationSpeed * delta;\r\n        }\r\n        if (this.keysPressed['d']) {\r\n            this.drone.rotation.y -= rotationSpeed * delta;\r\n        }\r\n\r\n        // Horizontal movement (arrow keys and Q/E for strafing)\r\n        let moveX = 0, moveZ = 0;\r\n        if (this.keysPressed['arrowdown']) moveZ -= 1;\r\n        if (this.keysPressed['arrowup']) moveZ += 1;\r\n        if (this.keysPressed['arrowleft']) moveX += 1;\r\n        if (this.keysPressed['arrowright']) moveX -= 1;\r\n        if (this.keysPressed['q']) moveX -= 1;\r\n        if (this.keysPressed['e']) moveX += 1;\r\n\r\n        // Vertical movement (W/S)\r\n        let moveY = 0;\r\n        if (this.keysPressed['w']) moveY += 1;\r\n        if (this.keysPressed['s']) moveY -= 1;\r\n\r\n        const horizontalMovement = new THREE.Vector3(moveX, 0, moveZ);\r\n        if (horizontalMovement.length() > 0) {\r\n            horizontalMovement.normalize();\r\n            horizontalMovement.multiplyScalar(translationSpeed * delta);\r\n            horizontalMovement.applyEuler(new THREE.Euler(0, this.drone.rotation.y, 0));\r\n        }\r\n        const verticalMovement = moveY * translationSpeed * delta;\r\n\r\n        const newPosition = this.drone.position.clone();\r\n        newPosition.add(horizontalMovement);\r\n        newPosition.y = Math.max(2, newPosition.y + verticalMovement);\r\n\r\n        // Collision detection with buildings.\r\n        const droneSphere = new THREE.Sphere(newPosition, droneRadius);\r\n        let willCollide = false;\r\n        for (const building of this.buildings) {\r\n            const buildingMesh = building.getMesh();\r\n            const buildingBox = new THREE.Box3().setFromObject(buildingMesh);\r\n            if (buildingBox.intersectsSphere(droneSphere)) {\r\n                willCollide = true;\r\n                this.showCollisionWarning();\r\n                break;\r\n            }\r\n        }\r\n        if (!willCollide) {\r\n            this.drone.position.copy(newPosition);\r\n        }\r\n    }\r\n\r\n    private createSpraySystem(): void {\r\n        if (!this.drone) return;\r\n        const particleCount = 1500;\r\n        const particles = new Float32Array(particleCount * 3);\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        const spriteMaterial = new THREE.PointsMaterial({\r\n            color: 0x0088ff,\r\n            size: 0.12,\r\n            transparent: true,\r\n            opacity: 0.8,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        \r\n        // Initialize particles in a wide cone.\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            const progress = (i / particleCount) * 25;\r\n            particles[i3] = (Math.random() - 0.5) * (0.4 + progress * 0.15);\r\n            particles[i3 + 1] = (Math.random() - 0.5) * (0.4 + progress * 0.15);\r\n            particles[i3 + 2] = -progress;\r\n        }\r\n        \r\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(particles, 3));\r\n        this.spraySystem = new THREE.Points(particleGeometry, spriteMaterial);\r\n        const sprayContainer = new THREE.Object3D();\r\n        sprayContainer.rotation.x = -Math.PI;\r\n        sprayContainer.add(this.spraySystem);\r\n        this.drone.add(sprayContainer);\r\n        this.spraySystem.position.set(-0.15, 0, 0);\r\n    }\r\n\r\n    // Update spray system; if sprayer is off, remove it.\r\n    private updateSpraySystem(): void {\r\n        if (!this.spraySystem) return;\r\n\r\n        if (!this.isSprayOn) {\r\n            if (this.spraySystem.parent) {\r\n                this.drone?.remove(this.spraySystem.parent);\r\n            }\r\n            this.spraySystem.geometry.dispose();\r\n            (this.spraySystem.material as THREE.PointsMaterial).dispose();\r\n            this.spraySystem = null;\r\n            return;\r\n        }\r\n\r\n        const positions = this.spraySystem.geometry.attributes.position.array as Float32Array;\r\n        const particleCount = positions.length / 3;\r\n        \r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            positions[i3 + 2] -= 0.3;\r\n            if (positions[i3 + 2] < -10) {\r\n                positions[i3] = (Math.random() - 0.5) * 0.05;\r\n                positions[i3 + 1] = (Math.random() - 0.5) * 0.05;\r\n                positions[i3 + 2] = 0;\r\n            }\r\n            positions[i3] *= 0.99;\r\n            positions[i3 + 1] *= 0.99;\r\n        }\r\n        this.spraySystem.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n\r\n    private updateCameras(): void {\r\n        if (!this.drone) return;\r\n        if (this.cameraMode === 'fpv') {\r\n            const dronePosition = new THREE.Vector3();\r\n            this.drone.getWorldPosition(dronePosition);\r\n            this.fpvCamera.position.copy(dronePosition);\r\n            const offset = new THREE.Vector3(-0.15, 0.20, 0.15);\r\n            offset.applyQuaternion(this.drone.quaternion);\r\n            this.fpvCamera.position.add(offset);\r\n            this.fpvCamera.rotation.set(0, this.drone.rotation.y + Math.PI, 0);\r\n        }\r\n        if (this.cameraMode === 'follow') {\r\n            const dronePosition = new THREE.Vector3();\r\n            this.drone.getWorldPosition(dronePosition);\r\n            const offset = new THREE.Vector3(0, 1.5, -2);\r\n            offset.applyQuaternion(this.drone.quaternion);\r\n            this.followCamera.position.copy(dronePosition).add(offset);\r\n            const forward = new THREE.Vector3(0, 0, 1);\r\n            forward.applyQuaternion(this.drone.quaternion);\r\n            const target = dronePosition.clone().add(forward);\r\n            this.followCamera.lookAt(target);\r\n        }\r\n    }\r\n\r\n    // Added missing checkCollisions method.\r\n    private checkCollisions(): void {\r\n        if (!this.drone) return;\r\n        const dronePosition = new THREE.Vector3();\r\n        this.drone.getWorldPosition(dronePosition);\r\n        const droneSphere = new THREE.Sphere(dronePosition, 0.5);\r\n        for (const building of this.buildings) {\r\n            const buildingMesh = building.getMesh();\r\n            const buildingBox = new THREE.Box3().setFromObject(buildingMesh);\r\n            if (buildingBox.intersectsSphere(droneSphere)) {\r\n                this.showCollisionWarning();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private animate(): void {\r\n        requestAnimationFrame(this.animate.bind(this));\r\n        \r\n        if (!this.gameStarted) {\r\n            // Just render the scene with the start screen\r\n            this.renderer.render(this.scene, this.camera);\r\n            return;\r\n        }\r\n\r\n        const currentTime = performance.now();\r\n        const delta = (currentTime - this.lastFrameTime) / 1000;\r\n        this.lastFrameTime = currentTime;\r\n        \r\n        // Animate propellers.\r\n        if (this.propellers.length > 0) {\r\n            this.propellers.forEach((propeller, index) => {\r\n                const direction = index % 2 === 0 ? 1 : -1;\r\n                propeller.rotation.y += this.propellerSpeed * direction;\r\n            });\r\n        }\r\n        \r\n        // Update systems.\r\n        this.updateDroneMovement(delta);\r\n        if (this.spraySystem) {\r\n            this.updateSpraySystem();\r\n        }\r\n        this.updateCameras();\r\n        this.checkCollisions();\r\n        this.checkLogoCollection();\r\n        \r\n        // Animate logos (rotate and float).\r\n        this.logos.forEach(logo => {\r\n            if (!logo.userData.collected) {\r\n                logo.quaternion.copy(this.activeCamera.quaternion);\r\n                logo.rotateZ(logo.userData.rotationSpeed);\r\n                const floatOffset = Math.sin(currentTime * 0.002) * 0.5;\r\n                logo.position.y = logo.userData.initialY + floatOffset;\r\n            }\r\n        });\r\n        \r\n        this.controls.update();\r\n        this.renderer.render(this.scene, this.activeCamera);\r\n    }\r\n\r\n    private clean(): void {\r\n        if (!this.drone || !this.isSprayOn) return;\r\n        this.buildings.forEach(building => {\r\n            const buildingPos = building.getMesh().position;\r\n            const dronePos = this.drone!.position;\r\n            const distance = new THREE.Vector3(buildingPos.x, buildingPos.y, buildingPos.z).distanceTo(dronePos);\r\n            if (distance < this.cleaningRadius) {\r\n                building.clean(this.cleaningPower);\r\n            }\r\n        });\r\n    }\r\n\r\n    private toggleCamera(): void {\r\n        switch (this.cameraMode) {\r\n            case 'orbit':\r\n                this.cameraMode = 'fpv';\r\n                this.activeCamera = this.fpvCamera;\r\n                this.controls.enabled = false;\r\n                break;\r\n            case 'fpv':\r\n                this.cameraMode = 'follow';\r\n                this.activeCamera = this.followCamera;\r\n                this.controls.enabled = false;\r\n                break;\r\n            case 'follow':\r\n                this.cameraMode = 'orbit';\r\n                this.activeCamera = this.camera;\r\n                this.controls.enabled = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    private createWarningPopup(): void {\r\n        if (!document.getElementById('warning-popup')) {\r\n            const warningElement = document.createElement('div');\r\n            warningElement.id = 'warning-popup';\r\n            warningElement.style.position = 'fixed';\r\n            warningElement.style.top = '50%';\r\n            warningElement.style.left = '50%';\r\n            warningElement.style.transform = 'translate(-50%, -50%)';\r\n            warningElement.style.backgroundColor = 'rgba(255, 200, 200, 0.95)';\r\n            warningElement.style.padding = '20px';\r\n            warningElement.style.borderRadius = '10px';\r\n            warningElement.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';\r\n            warningElement.style.display = 'none';\r\n            warningElement.style.zIndex = '1000';\r\n            warningElement.style.fontFamily = 'Arial, sans-serif';\r\n            warningElement.style.fontSize = '16px';\r\n            warningElement.style.color = '#333';\r\n            warningElement.style.border = '2px solid #ff6b6b';\r\n            warningElement.style.maxWidth = '400px';\r\n            warningElement.style.textAlign = 'center';\r\n            document.body.appendChild(warningElement);\r\n        }\r\n    }\r\n\r\n    private showCollisionWarning(): void {\r\n        const warningElement = document.getElementById('warning-popup');\r\n        if (warningElement && warningElement.style.display !== 'block') {\r\n            warningElement.textContent = \"The Sherpa drone is built with a forward facing collision radar to prevent the drone from drifting into buildings\";\r\n            warningElement.style.display = 'block';\r\n            if (this.warningTimeout !== null) {\r\n                window.clearTimeout(this.warningTimeout);\r\n            }\r\n            this.warningTimeout = window.setTimeout(() => {\r\n                if (warningElement) {\r\n                    warningElement.style.display = 'none';\r\n                }\r\n                this.warningTimeout = null;\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    // New coin collection: check if any spray particle hits a coin.\r\n    private checkLogoCollection(): void {\r\n        if (!this.drone || !this.spraySystem || !this.isSprayOn || this.hasWon) return;\r\n\r\n        const sprayContainer = this.spraySystem.parent;\r\n        if (!sprayContainer) return;\r\n        sprayContainer.updateMatrixWorld();\r\n        const matrixWorld = sprayContainer.matrixWorld;\r\n\r\n        const positions = this.spraySystem.geometry.attributes.position.array as Float32Array;\r\n        const particleCount = positions.length / 3;\r\n        const collisionThreshold = 0.5;\r\n\r\n        this.logos.forEach((logo) => {\r\n            if (!logo.userData.collected) {\r\n                const coinPos = logo.position.clone();\r\n                for (let i = 0; i < particleCount; i++) {\r\n                    const i3 = i * 3;\r\n                    const localParticlePos = new THREE.Vector3(\r\n                        positions[i3],\r\n                        positions[i3 + 1],\r\n                        positions[i3 + 2]\r\n                    );\r\n                    const worldParticlePos = localParticlePos.applyMatrix4(matrixWorld);\r\n                    if (worldParticlePos.distanceTo(coinPos) < collisionThreshold) {\r\n                        logo.userData.collected = true;\r\n                        this.scene.remove(logo);\r\n                        logo.geometry.dispose();\r\n                        if (logo.material instanceof THREE.Material) {\r\n                            logo.material.dispose();\r\n                        }\r\n                        this.score++;\r\n                        this.playCollectionEffect(logo.position.clone());\r\n                        this.updateScoreDisplay();\r\n                        \r\n                        // Show learning popup in learning mode\r\n                        if (this.gameMode === 'learning' && logo.userData.info) {\r\n                            this.showLearningPopup(logo.userData.info);\r\n                        }\r\n                        \r\n                        if (this.score >= 5) {\r\n                            this.showWinMessage();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private playCollectionEffect(position: THREE.Vector3): void {\r\n        const sparkleCount = 50;\r\n        const sparkleGeometry = new THREE.BufferGeometry();\r\n        const sparklePositions = new Float32Array(sparkleCount * 3);\r\n        const sparkleVelocities: THREE.Vector3[] = [];\r\n\r\n        for (let i = 0; i < sparkleCount; i++) {\r\n            const i3 = i * 3;\r\n            sparklePositions[i3] = position.x;\r\n            sparklePositions[i3 + 1] = position.y;\r\n            sparklePositions[i3 + 2] = position.z;\r\n            sparkleVelocities.push(new THREE.Vector3(\r\n                (Math.random() - 0.5) * 2,\r\n                Math.random() * 2,\r\n                (Math.random() - 0.5) * 2\r\n            ));\r\n        }\r\n        sparkleGeometry.setAttribute('position', new THREE.BufferAttribute(sparklePositions, 3));\r\n        const sparkleMaterial = new THREE.PointsMaterial({\r\n            color: 0xffff00,\r\n            size: 0.1,\r\n            transparent: true,\r\n            opacity: 1,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        const sparkles = new THREE.Points(sparkleGeometry, sparkleMaterial);\r\n        this.scene.add(sparkles);\r\n\r\n        let lifetime = 0;\r\n        const animateSparkles = () => {\r\n            if (lifetime > 1) {\r\n                this.scene.remove(sparkles);\r\n                sparkleGeometry.dispose();\r\n                sparkleMaterial.dispose();\r\n                return;\r\n            }\r\n            const positions = sparkleGeometry.attributes.position.array as Float32Array;\r\n            for (let i = 0; i < sparkleCount; i++) {\r\n                const i3 = i * 3;\r\n                positions[i3] += sparkleVelocities[i].x * 0.1;\r\n                positions[i3 + 1] += sparkleVelocities[i].y * 0.1;\r\n                positions[i3 + 2] += sparkleVelocities[i].z * 0.1;\r\n            }\r\n            sparkleGeometry.attributes.position.needsUpdate = true;\r\n            sparkleMaterial.opacity = 1 - lifetime;\r\n            lifetime += 0.05;\r\n            requestAnimationFrame(animateSparkles);\r\n        };\r\n        animateSparkles();\r\n    }\r\n\r\n    private updateScoreDisplay(): void {\r\n        const scoreElement = document.getElementById('score-display');\r\n        if (scoreElement) {\r\n            scoreElement.textContent = `Score: ${this.score}/5 Logos Collected!`;\r\n        }\r\n    }\r\n\r\n    private showWinMessage(): void {\r\n        this.hasWon = true;\r\n        const winElement = document.createElement('div');\r\n        winElement.style.position = 'fixed';\r\n        winElement.style.top = '50%';\r\n        winElement.style.left = '50%';\r\n        winElement.style.transform = 'translate(-50%, -50%)';\r\n        winElement.style.backgroundColor = '#00B4D8'; // Lucid Bots blue\r\n        winElement.style.padding = '30px';\r\n        winElement.style.borderRadius = '15px';\r\n        winElement.style.color = 'white';\r\n        winElement.style.fontSize = '24px';\r\n        winElement.style.fontWeight = 'bold';\r\n        winElement.style.textAlign = 'center';\r\n        winElement.style.zIndex = '1000';\r\n        winElement.style.maxWidth = '500px';\r\n\r\n        // Add logo image at the top\r\n        const logoImg = document.createElement('img');\r\n        logoImg.src = import.meta.env.BASE_URL + 'logo.png';\r\n        logoImg.style.width = '120px';\r\n        logoImg.style.marginBottom = '20px';\r\n        winElement.appendChild(logoImg);\r\n\r\n        // Create message container\r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.style.marginBottom = '20px';\r\n        \r\n        let message = 'Congratulations! You\\'ve collected all logos!';\r\n        if (this.gameMode === 'speed') {\r\n            const timerElement = document.getElementById('timer');\r\n            const finalTime = timerElement ? timerElement.textContent?.replace('Time: ', '') : '0:00';\r\n            message += `\\nYour time: ${finalTime}`;\r\n        } else if (this.gameMode === 'learning') {\r\n            // Add the final learning message\r\n            message += '\\n\\nRemember:';\r\n            messageDiv.innerHTML = message + '<br><br>' + \r\n                '\"We believe in responsible robotics, paving the way to better lives for everyone.';\r\n        }\r\n        \r\n        messageDiv.style.lineHeight = '1.4';\r\n        if (this.gameMode === 'speed') {\r\n            messageDiv.textContent = message;\r\n        }\r\n        winElement.appendChild(messageDiv);\r\n\r\n        // Add website link\r\n        const linkDiv = document.createElement('div');\r\n        linkDiv.style.fontSize = '18px';\r\n        linkDiv.style.marginTop = '20px';\r\n        const link = document.createElement('a');\r\n        link.href = 'https://lucidbots.com';\r\n        link.textContent = 'Visit lucidbots.com to learn more!';\r\n        link.style.color = 'white';\r\n        link.style.textDecoration = 'underline';\r\n        link.target = '_blank';\r\n        linkDiv.appendChild(link);\r\n        winElement.appendChild(linkDiv);\r\n\r\n        // Add \"Play Again\" button\r\n        const playAgainButton = document.createElement('button');\r\n        playAgainButton.textContent = 'Play Again';\r\n        playAgainButton.style.marginTop = '20px';\r\n        playAgainButton.style.padding = '10px 20px';\r\n        playAgainButton.style.fontSize = '18px';\r\n        playAgainButton.style.borderRadius = '5px';\r\n        playAgainButton.style.border = 'none';\r\n        playAgainButton.style.backgroundColor = 'white';\r\n        playAgainButton.style.color = '#00B4D8';\r\n        playAgainButton.style.cursor = 'pointer';\r\n        playAgainButton.style.transition = 'transform 0.2s';\r\n        playAgainButton.onmouseover = () => playAgainButton.style.transform = 'scale(1.05)';\r\n        playAgainButton.onmouseout = () => playAgainButton.style.transform = 'scale(1)';\r\n        playAgainButton.onclick = () => window.location.reload();\r\n        winElement.appendChild(playAgainButton);\r\n\r\n        document.body.appendChild(winElement);\r\n\r\n        setTimeout(() => {\r\n            document.body.removeChild(winElement);\r\n        }, 10000);\r\n    }\r\n\r\n    // Create a coin (logo) with glow effect.\r\n    private createLogo(): THREE.Mesh {\r\n        const logoGeometry = new THREE.CircleGeometry(1.5, 32);\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const logoTexture = textureLoader.load(import.meta.env.BASE_URL + 'logo.png');\r\n        logoTexture.minFilter = THREE.LinearFilter;\r\n        logoTexture.magFilter = THREE.LinearFilter;\r\n        \r\n        const logoMaterial = new THREE.MeshStandardMaterial({\r\n            map: logoTexture,\r\n            side: THREE.DoubleSide,\r\n            transparent: true,\r\n            opacity: 1,\r\n            emissive: 0xffffff,\r\n            emissiveMap: logoTexture,\r\n            emissiveIntensity: 0.8\r\n        });\r\n        \r\n        const logo = new THREE.Mesh(logoGeometry, logoMaterial);\r\n        const logoLight = new THREE.PointLight(0xffffff, 1, 5);\r\n        logoLight.position.set(0, 0, 0.1);\r\n        logo.add(logoLight);\r\n        const backLight = new THREE.PointLight(0xffffff, 1, 5);\r\n        backLight.position.set(0, 0, -0.1);\r\n        logo.add(backLight);\r\n        \r\n        logo.userData = { \r\n            collected: false,\r\n            initialY: 0,\r\n            rotationSpeed: 0.02\r\n        };\r\n        return logo;\r\n    }\r\n\r\n    private addLogos(): void {\r\n        const house = this.buildings[0];\r\n        const church = this.buildings[1];\r\n        const tank = this.buildings[2];\r\n        const highrise = this.buildings[3];\r\n        const waterTower = this.buildings[4];\r\n\r\n        const logoPositions = [\r\n            // Lower the house logo position for better visibility\r\n            { building: house, offsetY: 18, offsetX: 0, offsetZ: 0, info: \"Lucid Bots Inc. is an AI robotics company that builds productive and responsible robots for the exterior cleaning, concrete, and construction industries.\" },\r\n            // Church steeple\r\n            { building: church, offsetY: 25, offsetX: 0, offsetZ: 0, info: \"Our drones use advanced AI to learn and navigate complex environments safely.\" },\r\n            // Above silo\r\n            { building: tank, offsetY: 16, offsetX: 0, offsetZ: 0, info: \"Lucid Bots' Sherpa drone could clean any of these buildings in reality as well!\" },\r\n            // Highrise\r\n            { building: highrise, offsetY: 30, offsetX: 0, offsetZ: 4, info: \"Our mission at Lucid Bots is to elevate efficiency, safety, and humanity by creating the world's most productive drones.\" },\r\n            // Water tower\r\n            { building: waterTower, offsetY: 22, offsetX: 0, offsetZ: 0, info: \"We also have a surface cleaning robot, known as the Lavobot\" }\r\n        ];\r\n\r\n        logoPositions.forEach(({ building, offsetY, offsetX, offsetZ, info }) => {\r\n            const buildingPos = building.getMesh().position;\r\n            const logo = this.createLogo();\r\n            logo.position.set(\r\n                buildingPos.x + offsetX,\r\n                buildingPos.y + offsetY,\r\n                buildingPos.z + offsetZ\r\n            );\r\n            logo.userData.initialY = buildingPos.y + offsetY;\r\n            logo.userData.info = info; // Store the info message\r\n            this.logos.push(logo);\r\n            this.scene.add(logo);\r\n        });\r\n    }\r\n\r\n    private showLearningPopup(info: string): void {\r\n        const popupElement = document.createElement('div');\r\n        popupElement.style.position = 'fixed';\r\n        popupElement.style.top = '50%';\r\n        popupElement.style.left = '50%';\r\n        popupElement.style.transform = 'translate(-50%, -50%)';\r\n        popupElement.style.backgroundColor = 'rgba(0, 180, 216, 0.95)'; // Lucid Bots blue\r\n        popupElement.style.padding = '20px';\r\n        popupElement.style.borderRadius = '10px';\r\n        popupElement.style.boxShadow = '0 0 20px rgba(0,0,0,0.3)';\r\n        popupElement.style.color = 'white';\r\n        popupElement.style.fontSize = '18px';\r\n        popupElement.style.fontFamily = 'Arial, sans-serif';\r\n        popupElement.style.textAlign = 'center';\r\n        popupElement.style.maxWidth = '400px';\r\n        popupElement.style.zIndex = '1000';\r\n        popupElement.style.animation = 'fadeIn 0.3s ease-in-out';\r\n\r\n        // Add CSS animation\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes fadeIn {\r\n                from { opacity: 0; transform: translate(-50%, -60%); }\r\n                to { opacity: 1; transform: translate(-50%, -50%); }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        // Add logo image\r\n        const logoImg = document.createElement('img');\r\n        logoImg.src = import.meta.env.BASE_URL + 'logo.png';\r\n        logoImg.style.width = '100px';\r\n        logoImg.style.marginBottom = '15px';\r\n        popupElement.appendChild(logoImg);\r\n\r\n        // Add info text\r\n        const textElement = document.createElement('p');\r\n        textElement.textContent = info;\r\n        textElement.style.margin = '0';\r\n        textElement.style.lineHeight = '1.5';\r\n        popupElement.appendChild(textElement);\r\n\r\n        // Add continue button\r\n        const button = document.createElement('button');\r\n        button.textContent = 'Continue';\r\n        button.style.marginTop = '15px';\r\n        button.style.padding = '8px 20px';\r\n        button.style.fontSize = '16px';\r\n        button.style.backgroundColor = 'white';\r\n        button.style.color = '#00B4D8';\r\n        button.style.border = 'none';\r\n        button.style.borderRadius = '5px';\r\n        button.style.cursor = 'pointer';\r\n        button.style.transition = 'transform 0.2s';\r\n        button.onmouseover = () => button.style.transform = 'scale(1.05)';\r\n        button.onmouseout = () => button.style.transform = 'scale(1)';\r\n        button.onclick = () => document.body.removeChild(popupElement);\r\n        popupElement.appendChild(button);\r\n\r\n        document.body.appendChild(popupElement);\r\n    }\r\n}\r\n\r\n// Start the game\r\nnew Game();"],"names":["Building","position","__publicField","amount","child","THREE.Mesh","THREE.Material","ResidentialBuilding","mansion","THREE.Group","mainBody","THREE.BoxGeometry","THREE.MeshPhongMaterial","foundation","leftWing","rightWing","mainRoof","letterMaterial","vLeft","vRight","w1","w2","w3","w4","dStem","dCurve","THREE.CylinderGeometry","wingRoofGeometry","wingRoofMaterial","leftWingRoof","rightWingRoof","windowGeometry","windowMaterial","frameGeometry","frameMaterial","pos","index","frame","window","entrance","ChurchBuilding","church","body","steepleBase","steepleRoofGeometry","THREE.ConeGeometry","steepleRoof","crossVertical","crossHorizontal","cross","i","leftWindow","rightWindow","roseWindowGeometry","roseWindow","doorFrame","door","steps","roofGeometry","roof","IndustrialTank","silo","cylinderGeometry","siloBody","coneGeometry","cone","baseRingGeometry","THREE.TorusGeometry","baseRing","topRing","supportGeometry","support","angle","detailGeometry","detail","HighriseBuilding","building","bodyGeometry","bodyMaterial","glassGeometry","THREE.PlaneGeometry","glassMaterial","THREE.DoubleSide","frontGlass","backGlass","leftGlass","rightGlass","floorCount","floorSpacing","y","divider","roofBase","roofDetail","entranceBase","entranceRoof","WaterTower","tower","tankGeometry","tankMaterial","tank","bottomCurveGeometry","THREE.SphereGeometry","bottomCurve","topCurveGeometry","topCurve","roofMaterial","centralColumnGeometry","supportMaterial","centralColumn","height","ring","braceGeometry","rotation","brace1","brace2","platformGeometry","platform","railingGeometry","railing","railSupport","ladderHeight","ladderWidth","rungSpacing","sideRailGeometry","leftRail","rightRail","rung","Game","THREE.Scene","THREE.Color","THREE.PerspectiveCamera","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","THREE.SRGBColorSpace","THREE.ACESFilmicToneMapping","OrbitControls","logo","buttonsContainer","learningButton","speedButton","title","description","mode","button","titleElement","descElement","infoElement","startTime","timerElement","updateTimer","elapsed","minutes","seconds","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","hemisphereLight","THREE.HemisphereLight","dracoLoader","DRACOLoader","loader","GLTFLoader","gltf","droneHolder","THREE.Object3D","droneModel","droneSpotLight","THREE.SpotLight","dronePointLight","THREE.PointLight","progress","percentComplete","error","geometry","material","fallbackCube","droneLight","house","THREE.Vector3","highrise","waterTower","groundGeometry","groundMaterial","ground","event","delta","translationSpeed","rotationSpeed","droneRadius","moveX","moveZ","moveY","horizontalMovement","THREE.Euler","verticalMovement","newPosition","droneSphere","THREE.Sphere","willCollide","buildingMesh","THREE.Box3","particleCount","particles","particleGeometry","THREE.BufferGeometry","spriteMaterial","THREE.PointsMaterial","THREE.AdditiveBlending","i3","THREE.BufferAttribute","THREE.Points","sprayContainer","_a","positions","dronePosition","offset","forward","target","currentTime","propeller","direction","floatOffset","buildingPos","dronePos","warningElement","matrixWorld","collisionThreshold","coinPos","sparkleGeometry","sparklePositions","sparkleVelocities","sparkleMaterial","sparkles","lifetime","animateSparkles","scoreElement","winElement","logoImg","messageDiv","message","finalTime","linkDiv","link","playAgainButton","logoGeometry","THREE.CircleGeometry","logoTexture","THREE.TextureLoader","THREE.LinearFilter","logoMaterial","THREE.MeshStandardMaterial","logoLight","backLight","offsetY","offsetX","offsetZ","info","popupElement","style","textElement"],"mappings":"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"}
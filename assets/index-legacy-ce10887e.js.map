{"version":3,"file":"index-legacy-ce10887e.js","sources":["../../src/buildings/Building.ts","../../src/buildings/ResidentialBuilding.ts","../../src/buildings/ChurchBuilding.ts","../../src/buildings/IndustrialTank.ts","../../src/buildings/HighriseBuilding.ts","../../src/buildings/WaterTower.ts","../../src/main.ts"],"sourcesContent":["import * as THREE from 'three';\r\n\r\nexport abstract class Building {\r\n    protected mesh!: THREE.Object3D;\r\n    protected dirtyLevel: number = 100;\r\n    protected position: THREE.Vector3;\r\n\r\n    constructor(position: THREE.Vector3) {\r\n        this.position = position;\r\n    }\r\n\r\n    abstract createMesh(): void;\r\n\r\n    getMesh(): THREE.Object3D {\r\n        return this.mesh;\r\n    }\r\n\r\n    clean(amount: number): void {\r\n        this.dirtyLevel = Math.max(0, this.dirtyLevel - amount);\r\n        // Update material opacity based on dirt level\r\n        this.mesh.traverse((child) => {\r\n            if (child instanceof THREE.Mesh && child.material instanceof THREE.Material) {\r\n                if (child.material.transparent) {\r\n                    child.material.opacity = 0.3 + (this.dirtyLevel / 100) * 0.7;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getDirtLevel(): number {\r\n        return this.dirtyLevel;\r\n    }\r\n\r\n    isClean(): boolean {\r\n        return this.dirtyLevel === 0;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class ResidentialBuilding extends Building {\r\n    createMesh(): void {\r\n        const mansion = new THREE.Group();\r\n        \r\n        // Main building body\r\n        const mainBody = new THREE.Mesh(\r\n            new THREE.BoxGeometry(20, 15, 15),\r\n            new THREE.MeshPhongMaterial({ \r\n                color: 0xF5E6D3,\r\n                transparent: false,\r\n                opacity: 1\r\n            })\r\n        );\r\n\r\n        // Stone foundation\r\n        const foundation = new THREE.Mesh(\r\n            new THREE.BoxGeometry(21, 1, 16),\r\n            new THREE.MeshPhongMaterial({ \r\n                color: 0x7B7B7B\r\n            })\r\n        );\r\n        foundation.position.y = -7.5;\r\n\r\n        // Side wings\r\n        const leftWing = new THREE.Mesh(\r\n            new THREE.BoxGeometry(8, 8, 12),\r\n            new THREE.MeshPhongMaterial({ \r\n                color: 0xF5E6D3,\r\n                transparent: false,\r\n                opacity: 1\r\n            })\r\n        );\r\n        leftWing.position.set(-14, -2, 0);\r\n\r\n        const rightWing = leftWing.clone();\r\n        rightWing.position.set(14, -2, 0);\r\n\r\n        // Flat black roof with thicker height\r\n        const mainRoof = new THREE.Mesh(\r\n            new THREE.BoxGeometry(21, 2, 16),  // Increased height to 2\r\n            new THREE.MeshPhongMaterial({ \r\n                color: 0x000000,\r\n                transparent: false,\r\n                opacity: 1\r\n            })\r\n        );\r\n        mainRoof.position.y = 7.5;\r\n\r\n        // Create VWD text using box geometries\r\n        const letterMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0xFFFFFF,\r\n            transparent: false,\r\n            opacity: 1\r\n        });\r\n\r\n        // V\r\n        const vLeft = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2, 0.5),\r\n            letterMaterial\r\n        );\r\n        vLeft.position.set(-3, 7, 8.1);\r\n        vLeft.rotation.z = Math.PI * 0.1;\r\n        \r\n        const vRight = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2, 0.5),\r\n            letterMaterial\r\n        );\r\n        vRight.position.set(-2, 7, 8.1);\r\n        vRight.rotation.z = -Math.PI * 0.1;\r\n\r\n        // W\r\n        const w1 = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2.5, 0.5),  // Taller outer stroke\r\n            letterMaterial\r\n        );\r\n        w1.position.set(-0.8, 7, 8.1);\r\n        w1.rotation.z = Math.PI * 0.1;\r\n\r\n        const w2 = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 1.5, 0.5),  // Shorter inner stroke\r\n            letterMaterial\r\n        );\r\n        w2.position.set(0.2, 6.5, 8.1);  // Lowered position\r\n        w2.rotation.z = -Math.PI * 0.1;\r\n\r\n        const w3 = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 1.5, 0.5),  // Shorter inner stroke\r\n            letterMaterial\r\n        );\r\n        w3.position.set(1.2, 6.5, 8.1);  // Lowered position\r\n        w3.rotation.z = Math.PI * 0.1;\r\n\r\n        const w4 = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2.5, 0.5),  // Taller outer stroke\r\n            letterMaterial\r\n        );\r\n        w4.position.set(2.2, 7, 8.1);\r\n        w4.rotation.z = -Math.PI * 0.1;\r\n\r\n        // D\r\n        const dStem = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.8, 2.5, 0.5),\r\n            letterMaterial\r\n        );\r\n        dStem.position.set(3.8, 7, 8.1);\r\n\r\n        const dCurve = new THREE.Mesh(\r\n            new THREE.CylinderGeometry(1, 1.5, 0.5, 16, 1, false, -Math.PI/2, Math.PI),\r\n            letterMaterial\r\n        );\r\n        dCurve.rotation.x = Math.PI/2;\r\n        dCurve.rotation.y = Math.PI/2;\r\n        dCurve.position.set(3.8, 7, 8.1);\r\n\r\n        // Wing roofs (flat black and thicker)\r\n        const wingRoofGeometry = new THREE.BoxGeometry(9, 2, 13);  // Increased height to 2\r\n        const wingRoofMaterial = new THREE.MeshPhongMaterial({ color: 0x000000 });\r\n        const leftWingRoof = new THREE.Mesh(wingRoofGeometry, wingRoofMaterial);\r\n        leftWingRoof.position.set(-14, 2, 0);\r\n\r\n        const rightWingRoof = leftWingRoof.clone();\r\n        rightWingRoof.position.set(14, 2, 0);\r\n\r\n        // Windows\r\n        const windowGeometry = new THREE.BoxGeometry(2.5, 4, 0.2);\r\n        const windowMaterial = new THREE.MeshPhongMaterial({ \r\n            color: 0xADD8E6,\r\n            transparent: true,\r\n            opacity: 0.7\r\n        });\r\n\r\n        // Window frames\r\n        const frameGeometry = new THREE.BoxGeometry(3, 4.5, 0.3);\r\n        const frameMaterial = new THREE.MeshPhongMaterial({ color: 0xFFFFFF });\r\n\r\n        // Window positions\r\n        const windowPositions = [\r\n            // Front windows\r\n            [-7, 0, 7.6], [-2.3, 0, 7.6], [2.3, 0, 7.6], [7, 0, 7.6],\r\n            // Second floor front\r\n            [-7, 5, 7.6], [-2.3, 5, 7.6], [2.3, 5, 7.6], [7, 5, 7.6],\r\n            // Side windows\r\n            [-10.1, 0, 0], [-10.1, 5, 0], [10.1, 0, 0], [10.1, 5, 0],\r\n            // Wing windows\r\n            [-14, 0, 4], [-14, 0, -4], [14, 0, 4], [14, 0, -4]\r\n        ];\r\n\r\n        windowPositions.forEach((pos, index) => {\r\n            const frame = new THREE.Mesh(frameGeometry, frameMaterial);\r\n            const window = new THREE.Mesh(windowGeometry, windowMaterial);\r\n            \r\n            frame.position.set(pos[0], pos[1], pos[2]);\r\n            window.position.set(pos[0], pos[1], pos[2] + 0.1);\r\n            \r\n            if (index >= 8 && index < 12) {\r\n                frame.rotation.y = Math.PI / 2;\r\n                window.rotation.y = Math.PI / 2;\r\n            }\r\n            \r\n            mansion.add(frame);\r\n            mansion.add(window);\r\n        });\r\n\r\n        // Simple entrance\r\n        const entrance = new THREE.Mesh(\r\n            new THREE.BoxGeometry(6, 8, 1),\r\n            new THREE.MeshPhongMaterial({ color: 0xFFFFFF })\r\n        );\r\n        entrance.position.set(0, -2, 7.6);\r\n\r\n        // Add all elements\r\n        mansion.add(mainBody);\r\n        mansion.add(foundation);\r\n        mansion.add(leftWing);\r\n        mansion.add(rightWing);\r\n        mansion.add(mainRoof);\r\n        mansion.add(leftWingRoof);\r\n        mansion.add(rightWingRoof);\r\n        mansion.add(entrance);\r\n        mansion.add(vLeft);\r\n        mansion.add(vRight);\r\n        mansion.add(w1);\r\n        mansion.add(w2);\r\n        mansion.add(w3);\r\n        mansion.add(w4);  // Added fourth stroke for W\r\n        mansion.add(dStem);\r\n        mansion.add(dCurve);\r\n\r\n        // Position the mansion\r\n        mansion.position.copy(this.position);\r\n\r\n        this.mesh = mansion;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class ChurchBuilding extends Building {\r\n    createMesh(): void {\r\n        const church = new THREE.Group();\r\n\r\n        // Main church body (larger)\r\n        const body = new THREE.Mesh(\r\n            new THREE.BoxGeometry(10, 8, 16),\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0xF5F5DC, // Beige stone color\r\n                transparent: true,\r\n                opacity: 1\r\n            })\r\n        );\r\n\r\n        // Steeple base (taller)\r\n        const steepleBase = new THREE.Mesh(\r\n            new THREE.BoxGeometry(4, 12, 4),\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0xE8E8E8,\r\n                transparent: true,\r\n                opacity: 1\r\n            })\r\n        );\r\n        steepleBase.position.set(0, 10, -4);\r\n\r\n        // Steeple roof (taller pyramid)\r\n        const steepleRoofGeometry = new THREE.ConeGeometry(3, 6, 4);\r\n        const steepleRoof = new THREE.Mesh(\r\n            steepleRoofGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x8B4513,\r\n                transparent: true,\r\n                opacity: 1\r\n            })\r\n        );\r\n        steepleRoof.position.set(0, 19, -4);\r\n\r\n        // Larger cross\r\n        const crossVertical = new THREE.Mesh(\r\n            new THREE.BoxGeometry(0.4, 2, 0.4),\r\n            new THREE.MeshPhongMaterial({ color: 0xFFD700 })\r\n        );\r\n        const crossHorizontal = new THREE.Mesh(\r\n            new THREE.BoxGeometry(1.2, 0.4, 0.4),\r\n            new THREE.MeshPhongMaterial({ color: 0xFFD700 })\r\n        );\r\n        const cross = new THREE.Group();\r\n        cross.add(crossVertical);\r\n        cross.add(crossHorizontal);\r\n        cross.position.set(0, 23, -4);\r\n\r\n        // Larger, more ornate windows\r\n        const windowGeometry = new THREE.BoxGeometry(1.2, 4, 0.2);\r\n        const windowMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x87CEEB,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n\r\n        // Add windows on both sides\r\n        for (let i = -5; i <= 5; i += 5) {\r\n            const leftWindow = new THREE.Mesh(windowGeometry, windowMaterial);\r\n            leftWindow.position.set(-5.1, 0, i);\r\n            leftWindow.rotation.y = Math.PI / 2;\r\n            church.add(leftWindow);\r\n\r\n            const rightWindow = new THREE.Mesh(windowGeometry, windowMaterial);\r\n            rightWindow.position.set(5.1, 0, i);\r\n            rightWindow.rotation.y = Math.PI / 2;\r\n            church.add(rightWindow);\r\n        }\r\n\r\n        // Large front window (rose window)\r\n        const roseWindowGeometry = new THREE.CylinderGeometry(2, 2, 0.2, 16);\r\n        const roseWindow = new THREE.Mesh(\r\n            roseWindowGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x87CEEB,\r\n                transparent: true,\r\n                opacity: 0.8\r\n            })\r\n        );\r\n        roseWindow.rotation.x = Math.PI / 2;\r\n        roseWindow.position.set(0, 4, 8.1);\r\n\r\n        // Main door (larger, more ornate)\r\n        const doorFrame = new THREE.Mesh(\r\n            new THREE.BoxGeometry(4, 6, 0.5),\r\n            new THREE.MeshPhongMaterial({ color: 0x8B4513 })\r\n        );\r\n        doorFrame.position.set(0, -1, 8.1);\r\n\r\n        const door = new THREE.Mesh(\r\n            new THREE.BoxGeometry(3.6, 5.6, 0.2),\r\n            new THREE.MeshPhongMaterial({ color: 0x4A3520 })\r\n        );\r\n        door.position.set(0, -1, 8.3);\r\n\r\n        // Steps\r\n        const steps = new THREE.Mesh(\r\n            new THREE.BoxGeometry(6, 1, 2),\r\n            new THREE.MeshPhongMaterial({ color: 0x808080 })\r\n        );\r\n        steps.position.set(0, -4, 9);\r\n\r\n        // Roof details\r\n        const roofGeometry = new THREE.BoxGeometry(11, 0.5, 17);\r\n        const roof = new THREE.Mesh(\r\n            roofGeometry,\r\n            new THREE.MeshPhongMaterial({ color: 0x8B4513 })\r\n        );\r\n        roof.position.y = 4.25;\r\n\r\n        // Combine all elements\r\n        church.add(body);\r\n        church.add(steepleBase);\r\n        church.add(steepleRoof);\r\n        church.add(cross);\r\n        church.add(doorFrame);\r\n        church.add(door);\r\n        church.add(steps);\r\n        church.add(roof);\r\n        church.add(roseWindow);\r\n\r\n        // Position the church\r\n        church.position.copy(this.position);\r\n\r\n        this.mesh = church;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class IndustrialTank extends Building {\r\n    createMesh(): void {\r\n        const silo = new THREE.Group();\r\n\r\n        // Main cylindrical body (taller and wider)\r\n        const cylinderGeometry = new THREE.CylinderGeometry(3, 3, 15, 32);\r\n        const siloBody = new THREE.Mesh(\r\n            cylinderGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0xC0C0C0, // Lighter silver color\r\n                transparent: true,\r\n                opacity: 1,\r\n                shininess: 100\r\n            })\r\n        );\r\n\r\n        // Conical top\r\n        const coneGeometry = new THREE.ConeGeometry(3, 4, 32);\r\n        const cone = new THREE.Mesh(\r\n            coneGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0xB8B8B8,\r\n                transparent: true,\r\n                opacity: 1,\r\n                shininess: 100\r\n            })\r\n        );\r\n        cone.position.y = 9.5;\r\n\r\n        // Base ring\r\n        const baseRingGeometry = new THREE.TorusGeometry(3.2, 0.3, 16, 32);\r\n        const baseRing = new THREE.Mesh(\r\n            baseRingGeometry,\r\n            new THREE.MeshPhongMaterial({ color: 0x808080 })\r\n        );\r\n        baseRing.rotation.x = Math.PI / 2;\r\n        baseRing.position.y = -7.5;\r\n\r\n        // Top ring\r\n        const topRing = baseRing.clone();\r\n        topRing.position.y = 7.5;\r\n\r\n        // Support structure\r\n        const supportGeometry = new THREE.CylinderGeometry(3.5, 4.5, 2, 8);\r\n        const support = new THREE.Mesh(\r\n            supportGeometry,\r\n            new THREE.MeshPhongMaterial({ color: 0x606060 })\r\n        );\r\n        support.position.y = -8;\r\n\r\n        // Add vertical detail lines\r\n        for (let i = 0; i < 8; i++) {\r\n            const angle = (i / 8) * Math.PI * 2;\r\n            const detailGeometry = new THREE.BoxGeometry(0.2, 15, 0.2);\r\n            const detail = new THREE.Mesh(\r\n                detailGeometry,\r\n                new THREE.MeshPhongMaterial({ color: 0xA8A8A8 })\r\n            );\r\n            detail.position.set(\r\n                Math.cos(angle) * 3.1,\r\n                0,\r\n                Math.sin(angle) * 3.1\r\n            );\r\n            silo.add(detail);\r\n        }\r\n\r\n        // Add all elements to the silo group\r\n        silo.add(siloBody);\r\n        silo.add(cone);\r\n        silo.add(baseRing);\r\n        silo.add(topRing);\r\n        silo.add(support);\r\n\r\n        // Position the silo\r\n        silo.position.copy(this.position);\r\n\r\n        this.mesh = silo;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class HighriseBuilding extends Building {\r\n    createMesh(): void {\r\n        const building = new THREE.Group();\r\n\r\n        // Main building body\r\n        const bodyGeometry = new THREE.BoxGeometry(12, 40, 12);\r\n        const bodyMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x2F4F4F, // Dark slate gray\r\n            transparent: true,\r\n            opacity: 1,\r\n            shininess: 100\r\n        });\r\n        const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\r\n\r\n        // Glass panels for modern look\r\n        const glassGeometry = new THREE.PlaneGeometry(11, 38);\r\n        const glassMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x4682B4, // Steel blue\r\n            transparent: true,\r\n            opacity: 0.6,\r\n            shininess: 100,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        // Add glass panels to all four sides\r\n        const frontGlass = new THREE.Mesh(glassGeometry, glassMaterial);\r\n        frontGlass.position.set(0, 0, 6.01);\r\n        \r\n        const backGlass = new THREE.Mesh(glassGeometry, glassMaterial);\r\n        backGlass.position.set(0, 0, -6.01);\r\n        backGlass.rotation.y = Math.PI;\r\n\r\n        const leftGlass = new THREE.Mesh(glassGeometry, glassMaterial);\r\n        leftGlass.position.set(-6.01, 0, 0);\r\n        leftGlass.rotation.y = -Math.PI / 2;\r\n\r\n        const rightGlass = new THREE.Mesh(glassGeometry, glassMaterial);\r\n        rightGlass.position.set(6.01, 0, 0);\r\n        rightGlass.rotation.y = Math.PI / 2;\r\n\r\n        // Add horizontal dividers for floors\r\n        const floorCount = 12;\r\n        const floorSpacing = 3;\r\n        for (let i = 0; i < floorCount; i++) {\r\n            const y = -18 + (i * floorSpacing);\r\n            const divider = new THREE.Mesh(\r\n                new THREE.BoxGeometry(12.1, 0.2, 12.1),\r\n                new THREE.MeshPhongMaterial({ color: 0x4A4A4A })\r\n            );\r\n            divider.position.y = y;\r\n            building.add(divider);\r\n        }\r\n\r\n        // Add vertical supports\r\n        const supportPositions = [\r\n            [-5.5, 0, 6], [5.5, 0, 6],    // Front\r\n            [-5.5, 0, -6], [5.5, 0, -6],  // Back\r\n            [-6, 0, -5.5], [-6, 0, 5.5],  // Left\r\n            [6, 0, -5.5], [6, 0, 5.5]     // Right\r\n        ];\r\n\r\n        supportPositions.forEach(pos => {\r\n            const support = new THREE.Mesh(\r\n                new THREE.BoxGeometry(0.3, 40, 0.3),\r\n                new THREE.MeshPhongMaterial({ color: 0x2F4F4F })\r\n            );\r\n            support.position.set(pos[0], 0, pos[1]);\r\n            building.add(support);\r\n        });\r\n\r\n        // Modern roof structure\r\n        const roofBase = new THREE.Mesh(\r\n            new THREE.BoxGeometry(13, 1, 13),\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x4A4A4A,\r\n                shininess: 50\r\n            })\r\n        );\r\n        roofBase.position.y = 20.5;\r\n\r\n        // Roof details\r\n        const roofDetail = new THREE.Mesh(\r\n            new THREE.BoxGeometry(8, 3, 8),\r\n            new THREE.MeshPhongMaterial({ color: 0x2F4F4F })\r\n        );\r\n        roofDetail.position.y = 22;\r\n\r\n        // Modern entrance\r\n        const entranceBase = new THREE.Mesh(\r\n            new THREE.BoxGeometry(8, 4, 2),\r\n            new THREE.MeshPhongMaterial({ color: 0x4A4A4A })\r\n        );\r\n        entranceBase.position.set(0, -18, 7);\r\n\r\n        const entranceRoof = new THREE.Mesh(\r\n            new THREE.BoxGeometry(8, 0.3, 3),\r\n            new THREE.MeshPhongMaterial({ color: 0x2F4F4F })\r\n        );\r\n        entranceRoof.position.set(0, -16, 7.5);\r\n\r\n        // Glass door\r\n        const door = new THREE.Mesh(\r\n            new THREE.PlaneGeometry(6, 3.5),\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x4682B4,\r\n                transparent: true,\r\n                opacity: 0.8,\r\n                side: THREE.DoubleSide\r\n            })\r\n        );\r\n        door.position.set(0, -18, 8.1);\r\n\r\n        // Combine all elements\r\n        building.add(body);\r\n        building.add(frontGlass);\r\n        building.add(backGlass);\r\n        building.add(leftGlass);\r\n        building.add(rightGlass);\r\n        building.add(roofBase);\r\n        building.add(roofDetail);\r\n        building.add(entranceBase);\r\n        building.add(entranceRoof);\r\n        building.add(door);\r\n\r\n        // Position the building\r\n        building.position.copy(this.position);\r\n\r\n        this.mesh = building;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { Building } from './Building';\r\n\r\nexport class WaterTower extends Building {\r\n    createMesh(): void {\r\n        const tower = new THREE.Group();\r\n\r\n        // Main tank (larger and more cylindrical)\r\n        const tankGeometry = new THREE.CylinderGeometry(4, 4, 6, 32);\r\n        const tankMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x505050, // Darker gray\r\n            transparent: true,\r\n            opacity: 1,\r\n            shininess: 60\r\n        });\r\n        const tank = new THREE.Mesh(tankGeometry, tankMaterial);\r\n        tank.position.y = 15;\r\n\r\n        // Bottom curved part of tank\r\n        const bottomCurveGeometry = new THREE.SphereGeometry(4, 32, 16, 0, Math.PI * 2, 0, Math.PI / 2);\r\n        const bottomCurve = new THREE.Mesh(bottomCurveGeometry, tankMaterial);\r\n        bottomCurve.position.y = 12;\r\n\r\n        // Top curved part of tank\r\n        const topCurveGeometry = new THREE.SphereGeometry(4, 32, 16, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2);\r\n        const topCurve = new THREE.Mesh(topCurveGeometry, tankMaterial);\r\n        topCurve.position.y = 18;\r\n\r\n        // Conical roof with overhang\r\n        const roofGeometry = new THREE.ConeGeometry(4.5, 2.5, 32);\r\n        const roofMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x8B0000, // Dark red\r\n            shininess: 30\r\n        });\r\n        const roof = new THREE.Mesh(roofGeometry, roofMaterial);\r\n        roof.position.y = 19.5;\r\n\r\n        // Central support column\r\n        const centralColumnGeometry = new THREE.CylinderGeometry(0.8, 0.8, 24, 12);\r\n        const supportMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x2F2F2F,\r\n            shininess: 30\r\n        });\r\n        const centralColumn = new THREE.Mesh(centralColumnGeometry, supportMaterial);\r\n        centralColumn.position.y = 0;\r\n\r\n        // Main support beams (thicker and more detailed)\r\n        const mainSupportPositions = [\r\n            [-2.5, 0, -2.5],\r\n            [2.5, 0, -2.5],\r\n            [-2.5, 0, 2.5],\r\n            [2.5, 0, 2.5]\r\n        ];\r\n\r\n        mainSupportPositions.forEach(pos => {\r\n            const support = new THREE.Mesh(\r\n                new THREE.CylinderGeometry(0.4, 0.4, 24, 8),\r\n                supportMaterial\r\n            );\r\n            support.position.set(pos[0], 0, pos[1]);\r\n            tower.add(support);\r\n        });\r\n\r\n        // Add horizontal support rings at different heights\r\n        const ringHeights = [-6, -2, 2, 6, 10];\r\n        ringHeights.forEach(height => {\r\n            const ring = new THREE.Mesh(\r\n                new THREE.TorusGeometry(3.5, 0.2, 16, 32),\r\n                supportMaterial\r\n            );\r\n            ring.rotation.x = Math.PI / 2;\r\n            ring.position.y = height;\r\n            tower.add(ring);\r\n        });\r\n\r\n        // Add diagonal cross braces\r\n        const braceGeometry = new THREE.CylinderGeometry(0.15, 0.15, 7.5, 8);\r\n        const braceHeights = [-4, 0, 4, 8];\r\n        \r\n        braceHeights.forEach(height => {\r\n            // Create X-shaped braces on all four sides\r\n            for (let rotation = 0; rotation < Math.PI * 2; rotation += Math.PI/2) {\r\n                const brace1 = new THREE.Mesh(braceGeometry, supportMaterial);\r\n                brace1.position.y = height;\r\n                brace1.rotation.z = Math.PI / 4;\r\n                brace1.rotation.y = rotation;\r\n                tower.add(brace1);\r\n\r\n                const brace2 = new THREE.Mesh(braceGeometry, supportMaterial);\r\n                brace2.position.y = height;\r\n                brace2.rotation.z = -Math.PI / 4;\r\n                brace2.rotation.y = rotation;\r\n                tower.add(brace2);\r\n            }\r\n        });\r\n\r\n        // Add maintenance platform\r\n        const platformGeometry = new THREE.CylinderGeometry(4.5, 4.5, 0.3, 32);\r\n        const platform = new THREE.Mesh(platformGeometry, supportMaterial);\r\n        platform.position.y = 11;\r\n\r\n        // Add railing to the platform\r\n        const railingGeometry = new THREE.TorusGeometry(4.5, 0.05, 8, 32);\r\n        const railing = new THREE.Mesh(railingGeometry, supportMaterial);\r\n        railing.rotation.x = Math.PI / 2;\r\n        railing.position.y = 12;\r\n\r\n        // Add vertical railing supports\r\n        for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 8) {\r\n            const railSupport = new THREE.Mesh(\r\n                new THREE.CylinderGeometry(0.05, 0.05, 1, 4),\r\n                supportMaterial\r\n            );\r\n            railSupport.position.set(\r\n                4.5 * Math.cos(angle),\r\n                11.5,\r\n                4.5 * Math.sin(angle)\r\n            );\r\n            tower.add(railSupport);\r\n        }\r\n\r\n        // Add access ladder\r\n        const ladderHeight = 24;\r\n        const ladderWidth = 0.6;\r\n        const rungSpacing = 1;\r\n\r\n        // Ladder side rails\r\n        const sideRailGeometry = new THREE.CylinderGeometry(0.05, 0.05, ladderHeight, 4);\r\n        const leftRail = new THREE.Mesh(sideRailGeometry, supportMaterial);\r\n        const rightRail = new THREE.Mesh(sideRailGeometry, supportMaterial);\r\n        leftRail.position.set(-ladderWidth/2, ladderHeight/2 - 12, 4.2);\r\n        rightRail.position.set(ladderWidth/2, ladderHeight/2 - 12, 4.2);\r\n        tower.add(leftRail);\r\n        tower.add(rightRail);\r\n\r\n        // Ladder rungs\r\n        for (let i = 0; i < ladderHeight; i += rungSpacing) {\r\n            const rung = new THREE.Mesh(\r\n                new THREE.CylinderGeometry(0.025, 0.025, ladderWidth, 4),\r\n                supportMaterial\r\n            );\r\n            rung.rotation.x = Math.PI / 2;\r\n            rung.position.set(0, i - 12, 4.2);\r\n            tower.add(rung);\r\n        }\r\n\r\n        // Add all main elements\r\n        tower.add(tank);\r\n        tower.add(bottomCurve);\r\n        tower.add(topCurve);\r\n        tower.add(roof);\r\n        tower.add(centralColumn);\r\n        tower.add(platform);\r\n        tower.add(railing);\r\n\r\n        // Position the tower\r\n        tower.position.copy(this.position);\r\n\r\n        this.mesh = tower;\r\n    }\r\n} ","import * as THREE from 'three';\r\nimport { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport { ResidentialBuilding } from './buildings/ResidentialBuilding';\r\nimport { ChurchBuilding } from './buildings/ChurchBuilding';\r\nimport { IndustrialTank } from './buildings/IndustrialTank';\r\nimport { HighriseBuilding } from './buildings/HighriseBuilding';\r\nimport { Building } from './buildings/Building';\r\nimport { WaterTower } from './buildings/WaterTower';\r\n\r\nclass Game {\r\n    private scene: THREE.Scene;\r\n    private camera: THREE.PerspectiveCamera;\r\n    private fpvCamera: THREE.PerspectiveCamera;\r\n    private followCamera: THREE.PerspectiveCamera;\r\n    private activeCamera: THREE.PerspectiveCamera;\r\n    private renderer: THREE.WebGLRenderer;\r\n    private drone: THREE.Object3D | null = null;\r\n    private buildings: Building[] = [];\r\n    private controls: OrbitControls;\r\n    private cleaningRadius = 2;\r\n    private cleaningPower = 1;\r\n    private isSprayOn: boolean = false;\r\n    private spraySystem: THREE.Points | null = null;\r\n    private propellers: THREE.Object3D[] = [];\r\n    private propellerSpeed = 1.1;\r\n    private warningTimeout: number | null = null;\r\n    private cameraMode: 'orbit' | 'fpv' | 'follow' = 'follow';\r\n    private keysPressed: { [key: string]: boolean } = {};\r\n    private lastFrameTime: number = performance.now();\r\n    private logos: THREE.Mesh[] = [];\r\n    private score: number = 0;\r\n    private hasWon: boolean = false;\r\n    private gameStarted: boolean = false;\r\n    private gameMode: 'learning' | 'speed' | null = null;\r\n    private startScreenContainer: HTMLDivElement | null = null;\r\n\r\n    constructor() {\r\n        // Scene setup\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background = new THREE.Color(0x87ceeb); // Sky blue\r\n\r\n        // Orbit camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            75,\r\n            window.innerWidth / window.innerHeight,\r\n            0.1,\r\n            1000\r\n        );\r\n        this.camera.position.set(0, 15, 30);\r\n\r\n        // FPV camera\r\n        this.fpvCamera = new THREE.PerspectiveCamera(\r\n            90,\r\n            window.innerWidth / window.innerHeight,\r\n            0.1,\r\n            1000\r\n        );\r\n\r\n        // Follow camera\r\n        this.followCamera = new THREE.PerspectiveCamera(\r\n            75,\r\n            window.innerWidth / window.innerHeight,\r\n            0.1,\r\n            1000\r\n        );\r\n        this.activeCamera = this.followCamera;\r\n\r\n        // Renderer setup\r\n        this.renderer = new THREE.WebGLRenderer({ \r\n            antialias: true,\r\n            alpha: true,\r\n            powerPreference: \"default\"\r\n        });\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        this.renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n        this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n        this.renderer.toneMappingExposure = 1.0;\r\n        document.body.appendChild(this.renderer.domElement);\r\n\r\n        // Create and show start screen immediately\r\n        this.createStartScreen();\r\n\r\n        // Orbit controls (disabled initially in follow mode)\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.controls.enableDamping = true;\r\n        this.controls.dampingFactor = 0.05;\r\n        this.controls.maxPolarAngle = Math.PI / 2;\r\n        this.controls.minDistance = 5;\r\n        this.controls.maxDistance = 100;\r\n        this.controls.enabled = false;\r\n\r\n        // Start animation loop\r\n        this.animate();\r\n    }\r\n\r\n    private createStartScreen(): void {\r\n        // Create container\r\n        this.startScreenContainer = document.createElement('div');\r\n        this.startScreenContainer.style.position = 'fixed';\r\n        this.startScreenContainer.style.top = '0';\r\n        this.startScreenContainer.style.left = '0';\r\n        this.startScreenContainer.style.width = '100%';\r\n        this.startScreenContainer.style.height = '100%';\r\n        this.startScreenContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\r\n        this.startScreenContainer.style.display = 'flex';\r\n        this.startScreenContainer.style.flexDirection = 'column';\r\n        this.startScreenContainer.style.alignItems = 'center';\r\n        this.startScreenContainer.style.justifyContent = 'center';\r\n        this.startScreenContainer.style.zIndex = '1000';\r\n\r\n        // Add logo\r\n        const logo = document.createElement('img');\r\n        logo.src = import.meta.env.BASE_URL + 'start.png';\r\n        logo.style.width = '400px';\r\n        logo.style.marginBottom = '40px';\r\n        this.startScreenContainer.appendChild(logo);\r\n\r\n        // Create mode buttons container\r\n        const buttonsContainer = document.createElement('div');\r\n        buttonsContainer.style.display = 'flex';\r\n        buttonsContainer.style.flexDirection = 'column';\r\n        buttonsContainer.style.gap = '20px';\r\n\r\n        // Learning Mode Button\r\n        const learningButton = this.createModeButton(\r\n            'Learning Mode',\r\n            'Learn about Lucid Bots while flying the drone',\r\n            'learning'\r\n        );\r\n        buttonsContainer.appendChild(learningButton);\r\n\r\n        // Speed Mode Button\r\n        const speedButton = this.createModeButton(\r\n            'Speed Mode',\r\n            'Test your drone piloting skills',\r\n            'speed'\r\n        );\r\n        buttonsContainer.appendChild(speedButton);\r\n\r\n        this.startScreenContainer.appendChild(buttonsContainer);\r\n        document.body.appendChild(this.startScreenContainer);\r\n    }\r\n\r\n    private createModeButton(title: string, description: string, mode: 'learning' | 'speed'): HTMLDivElement {\r\n        const button = document.createElement('div');\r\n        button.style.backgroundColor = '#00B4D8';\r\n        button.style.padding = '20px 40px';\r\n        button.style.borderRadius = '10px';\r\n        button.style.cursor = 'pointer';\r\n        button.style.textAlign = 'center';\r\n        button.style.transition = 'transform 0.2s, background-color 0.2s';\r\n        button.style.width = '400px';\r\n\r\n        const titleElement = document.createElement('h2');\r\n        titleElement.textContent = title;\r\n        titleElement.style.color = 'white';\r\n        titleElement.style.margin = '0 0 10px 0';\r\n        titleElement.style.fontFamily = 'Arial, sans-serif';\r\n\r\n        const descElement = document.createElement('p');\r\n        descElement.textContent = description;\r\n        descElement.style.color = 'white';\r\n        descElement.style.margin = '0';\r\n        descElement.style.fontFamily = 'Arial, sans-serif';\r\n\r\n        button.appendChild(titleElement);\r\n        button.appendChild(descElement);\r\n\r\n        // Hover effects\r\n        button.onmouseover = () => {\r\n            button.style.backgroundColor = '#0096B4';\r\n            button.style.transform = 'scale(1.05)';\r\n        };\r\n        button.onmouseout = () => {\r\n            button.style.backgroundColor = '#00B4D8';\r\n            button.style.transform = 'scale(1)';\r\n        };\r\n\r\n        // Click handler\r\n        button.onclick = () => this.startGame(mode);\r\n\r\n        return button;\r\n    }\r\n\r\n    private startGame(mode: 'learning' | 'speed'): void {\r\n        this.gameMode = mode;\r\n        this.gameStarted = true;\r\n        \r\n        // Remove start screen\r\n        if (this.startScreenContainer) {\r\n            document.body.removeChild(this.startScreenContainer);\r\n            this.startScreenContainer = null;\r\n        }\r\n\r\n        // Initialize game components\r\n        this.setupLighting();\r\n        this.setupControlsUI();\r\n        this.loadDroneModel();\r\n        this.addBuildings();\r\n        this.addGround();\r\n        this.addLogos();\r\n        this.updateScoreDisplay();\r\n        this.createWarningPopup();\r\n\r\n        // Add event listeners\r\n        window.addEventListener('resize', this.onWindowResize.bind(this));\r\n        document.addEventListener('keydown', this.onKeyDown.bind(this));\r\n        document.addEventListener('keyup', this.onKeyUp.bind(this));\r\n\r\n        // Update UI based on game mode\r\n        this.updateUIForGameMode();\r\n    }\r\n\r\n    private updateUIForGameMode(): void {\r\n        const infoElement = document.getElementById('info');\r\n        if (!infoElement) return;\r\n\r\n        if (this.gameMode === 'learning') {\r\n            infoElement.innerHTML += `\r\n                <div style=\"margin-top: 10px; padding-top: 10px; border-top: 1px solid white;\">\r\n                    <p style=\"margin: 0;\">Learning Mode: Collect logos to learn about Lucid Bots!</p>\r\n                </div>\r\n            `;\r\n        } else {\r\n            infoElement.innerHTML += `\r\n                <div style=\"margin-top: 10px; padding-top: 10px; border-top: 1px solid white;\">\r\n                    <p style=\"margin: 0;\">Speed Mode: Collect all logos as fast as you can!</p>\r\n                    <p id=\"timer\" style=\"margin: 5px 0 0 0;\">Time: 0:00</p>\r\n                </div>\r\n            `;\r\n            this.startSpeedModeTimer();\r\n        }\r\n    }\r\n\r\n    private startSpeedModeTimer(): void {\r\n        if (this.gameMode !== 'speed') return;\r\n        \r\n        const startTime = Date.now();\r\n        const timerElement = document.getElementById('timer');\r\n        \r\n        const updateTimer = () => {\r\n            if (!this.hasWon && timerElement) {\r\n                const elapsed = Math.floor((Date.now() - startTime) / 1000);\r\n                const minutes = Math.floor(elapsed / 60);\r\n                const seconds = elapsed % 60;\r\n                timerElement.textContent = `Time: ${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n                requestAnimationFrame(updateTimer);\r\n            }\r\n        };\r\n        \r\n        updateTimer();\r\n    }\r\n\r\n    private setupLighting(): void {\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n        this.scene.add(ambientLight);\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n        directionalLight.position.set(50, 50, 50);\r\n        directionalLight.castShadow = true;\r\n        directionalLight.shadow.mapSize.width = 2048;\r\n        directionalLight.shadow.mapSize.height = 2048;\r\n        directionalLight.shadow.camera.near = 0.5;\r\n        directionalLight.shadow.camera.far = 500;\r\n        this.scene.add(directionalLight);\r\n\r\n        const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444, 0.6);\r\n        this.scene.add(hemisphereLight);\r\n    }\r\n\r\n    // Creates a fixed, styled UI panel for game controls and score.\r\n    private setupControlsUI(): void {\r\n        let infoElement = document.getElementById('info');\r\n        if (!infoElement) {\r\n            infoElement = document.createElement('div');\r\n            infoElement.id = 'info';\r\n            document.body.appendChild(infoElement);\r\n        }\r\n        infoElement.style.position = 'fixed';\r\n        infoElement.style.top = '10px';\r\n        infoElement.style.right = '10px';\r\n        infoElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\r\n        infoElement.style.color = 'white';\r\n        infoElement.style.padding = '10px';\r\n        infoElement.style.borderRadius = '8px';\r\n        infoElement.style.fontFamily = 'Arial, sans-serif';\r\n        infoElement.innerHTML = `\r\n            <h3 style=\"margin:0; font-size:18px;\">Game Controls</h3>\r\n            <ul style=\"list-style:none; padding:0; margin:5px 0;\">\r\n                <li>Arrow Keys: Move Drone</li>\r\n                <li>A/D: Yaw Left/Right</li>\r\n                <li>W/S: Up/Down</li>\r\n                <li>Space: Toggle Sprayer</li>\r\n                <li>C: Clean (when sprayer is on)</li>\r\n                <li>V: Toggle Camera</li>\r\n                <li>Mouse: Orbit Camera (if enabled)</li>\r\n            </ul>\r\n            <p id=\"score-display\" style=\"margin:0; font-weight:bold;\">Score: 0/5 Logos Collected!</p>\r\n        `;\r\n    }\r\n\r\n    private loadDroneModel(): void {\r\n        const dracoLoader = new DRACOLoader();\r\n        dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');\r\n        const loader = new GLTFLoader();\r\n        loader.setDRACOLoader(dracoLoader);\r\n\r\n        console.log('Attempting to load drone model...');\r\n        loader.load(import.meta.env.BASE_URL + 'sherpaModel.glb', (gltf: GLTF) => {\r\n            console.log('Drone model loaded successfully:', gltf);\r\n            if (gltf.scene) {\r\n                const droneHolder = new THREE.Object3D();\r\n                const droneModel = gltf.scene;\r\n                // Rotate so it faces forward\r\n                droneModel.rotation.x = -Math.PI / 2;\r\n                droneModel.scale.set(0.5, 0.5, 0.5);\r\n                \r\n                // Traverse to set shadow properties and find propellers\r\n                droneModel.traverse((child) => {\r\n                    if (child instanceof THREE.Mesh) {\r\n                        child.castShadow = true;\r\n                        child.receiveShadow = true;\r\n                        if (child.material && child.material.transparent) {\r\n                            child.material.opacity = 0.9;\r\n                            child.material.side = THREE.DoubleSide;\r\n                        }\r\n                        if (child.name.toLowerCase().includes('propeller') || \r\n                            child.name.toLowerCase().includes('prop') || \r\n                            child.name.toLowerCase().includes('rotor')) {\r\n                            console.log('Found propeller:', child.name);\r\n                            this.propellers.push(child);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                droneHolder.add(droneModel);\r\n                droneHolder.position.set(0, 5, 0);\r\n\r\n                // Add drone lights\r\n                const droneSpotLight = new THREE.SpotLight(0xffffff, 1);\r\n                droneSpotLight.position.set(0, 0.5, 0);\r\n                droneSpotLight.angle = Math.PI / 6;\r\n                droneSpotLight.penumbra = 0.5;\r\n                droneSpotLight.decay = 2;\r\n                droneSpotLight.distance = 10;\r\n                droneHolder.add(droneSpotLight);\r\n                const dronePointLight = new THREE.PointLight(0xffffff, 0.5, 5);\r\n                droneHolder.add(dronePointLight);\r\n\r\n                this.drone = droneHolder;\r\n                this.scene.add(this.drone);\r\n                console.log('Drone added to scene at position:', this.drone.position);\r\n\r\n                dracoLoader.dispose();\r\n            } else {\r\n                console.error('No scene found in the loaded model');\r\n            }\r\n        },\r\n        (progress) => {\r\n            const percentComplete = Math.round((progress.loaded / progress.total) * 100);\r\n            console.log(`Loading progress: ${percentComplete}%`);\r\n        },\r\n        (error) => {\r\n            console.error('Error loading drone model:', error);\r\n            const droneHolder = new THREE.Object3D();\r\n            const geometry = new THREE.BoxGeometry(2, 1, 2);\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: 0x3366ff,\r\n                transparent: true,\r\n                opacity: 0.8\r\n            });\r\n            const fallbackCube = new THREE.Mesh(geometry, material);\r\n            droneHolder.add(fallbackCube);\r\n            droneHolder.position.set(0, 5, 0);\r\n            const droneLight = new THREE.PointLight(0xffffff, 0.5, 10);\r\n            droneHolder.add(droneLight);\r\n            this.drone = droneHolder;\r\n            this.scene.add(this.drone);\r\n            console.log('Fallback drone cube added to scene');\r\n        });\r\n    }\r\n\r\n    private addBuildings(): void {\r\n        const house = new ResidentialBuilding(new THREE.Vector3(-20, 3, -15));\r\n        house.createMesh();\r\n        this.scene.add(house.getMesh());\r\n        this.buildings.push(house);\r\n\r\n        const church = new ChurchBuilding(new THREE.Vector3(20, 4, -15));\r\n        church.createMesh();\r\n        this.scene.add(church.getMesh());\r\n        this.buildings.push(church);\r\n\r\n        const tank = new IndustrialTank(new THREE.Vector3(-20, 8, 15));\r\n        tank.createMesh();\r\n        this.scene.add(tank.getMesh());\r\n        this.buildings.push(tank);\r\n\r\n        const highrise = new HighriseBuilding(new THREE.Vector3(20, 20, 15));\r\n        highrise.createMesh();\r\n        this.scene.add(highrise.getMesh());\r\n        this.buildings.push(highrise);\r\n\r\n        const waterTower = new WaterTower(new THREE.Vector3(-40, 12, -35));\r\n        waterTower.createMesh();\r\n        this.scene.add(waterTower.getMesh());\r\n        this.buildings.push(waterTower);\r\n    }\r\n\r\n    private addGround(): void {\r\n        const groundGeometry = new THREE.PlaneGeometry(100, 100);\r\n        const groundMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x90EE90,\r\n            side: THREE.DoubleSide\r\n        });\r\n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n        ground.rotation.x = -Math.PI / 2;\r\n        ground.receiveShadow = true;\r\n        this.scene.add(ground);\r\n    }\r\n\r\n    private onWindowResize(): void {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight;\r\n        this.camera.updateProjectionMatrix();\r\n        this.fpvCamera.aspect = window.innerWidth / window.innerHeight;\r\n        this.fpvCamera.updateProjectionMatrix();\r\n        this.followCamera.aspect = window.innerWidth / window.innerHeight;\r\n        this.followCamera.updateProjectionMatrix();\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    private onKeyDown(event: KeyboardEvent): void {\r\n        this.keysPressed[event.key.toLowerCase()] = true;\r\n        switch (event.key.toLowerCase()) {\r\n            case ' ':\r\n                // Toggle the sprayer\r\n                this.isSprayOn = !this.isSprayOn;\r\n                if (this.isSprayOn && !this.spraySystem) {\r\n                    this.createSpraySystem();\r\n                }\r\n                break;\r\n            case 'c':\r\n                if (this.isSprayOn) {\r\n                    this.clean();\r\n                }\r\n                break;\r\n            case 'v':\r\n                this.toggleCamera();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onKeyUp(event: KeyboardEvent): void {\r\n        this.keysPressed[event.key.toLowerCase()] = false;\r\n    }\r\n\r\n    // Drone movement using a smaller bounding sphere for collision.\r\n    private updateDroneMovement(delta: number): void {\r\n        if (!this.drone) return;\r\n\r\n        const translationSpeed = 5;\r\n        const rotationSpeed = 1.5;\r\n        const droneRadius = 0.8;\r\n\r\n        // Yaw rotation (A/D)\r\n        if (this.keysPressed['a']) {\r\n            this.drone.rotation.y += rotationSpeed * delta;\r\n        }\r\n        if (this.keysPressed['d']) {\r\n            this.drone.rotation.y -= rotationSpeed * delta;\r\n        }\r\n\r\n        // Horizontal movement (arrow keys and Q/E for strafing)\r\n        let moveX = 0, moveZ = 0;\r\n        if (this.keysPressed['arrowdown']) moveZ -= 1;\r\n        if (this.keysPressed['arrowup']) moveZ += 1;\r\n        if (this.keysPressed['arrowleft']) moveX += 1;\r\n        if (this.keysPressed['arrowright']) moveX -= 1;\r\n        if (this.keysPressed['q']) moveX -= 1;\r\n        if (this.keysPressed['e']) moveX += 1;\r\n\r\n        // Vertical movement (W/S)\r\n        let moveY = 0;\r\n        if (this.keysPressed['w']) moveY += 1;\r\n        if (this.keysPressed['s']) moveY -= 1;\r\n\r\n        const horizontalMovement = new THREE.Vector3(moveX, 0, moveZ);\r\n        if (horizontalMovement.length() > 0) {\r\n            horizontalMovement.normalize();\r\n            horizontalMovement.multiplyScalar(translationSpeed * delta);\r\n            horizontalMovement.applyEuler(new THREE.Euler(0, this.drone.rotation.y, 0));\r\n        }\r\n        const verticalMovement = moveY * translationSpeed * delta;\r\n\r\n        const newPosition = this.drone.position.clone();\r\n        newPosition.add(horizontalMovement);\r\n        newPosition.y = Math.max(2, newPosition.y + verticalMovement);\r\n\r\n        // Collision detection with buildings.\r\n        const droneSphere = new THREE.Sphere(newPosition, droneRadius);\r\n        let willCollide = false;\r\n        for (const building of this.buildings) {\r\n            const buildingMesh = building.getMesh();\r\n            const buildingBox = new THREE.Box3().setFromObject(buildingMesh);\r\n            if (buildingBox.intersectsSphere(droneSphere)) {\r\n                willCollide = true;\r\n                this.showCollisionWarning();\r\n                break;\r\n            }\r\n        }\r\n        if (!willCollide) {\r\n            this.drone.position.copy(newPosition);\r\n        }\r\n    }\r\n\r\n    private createSpraySystem(): void {\r\n        if (!this.drone) return;\r\n        const particleCount = 1500;\r\n        const particles = new Float32Array(particleCount * 3);\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        const spriteMaterial = new THREE.PointsMaterial({\r\n            color: 0x0088ff,\r\n            size: 0.12,\r\n            transparent: true,\r\n            opacity: 0.8,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        \r\n        // Initialize particles in a wide cone.\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            const progress = (i / particleCount) * 25;\r\n            particles[i3] = (Math.random() - 0.5) * (0.4 + progress * 0.15);\r\n            particles[i3 + 1] = (Math.random() - 0.5) * (0.4 + progress * 0.15);\r\n            particles[i3 + 2] = -progress;\r\n        }\r\n        \r\n        particleGeometry.setAttribute('position', new THREE.BufferAttribute(particles, 3));\r\n        this.spraySystem = new THREE.Points(particleGeometry, spriteMaterial);\r\n        const sprayContainer = new THREE.Object3D();\r\n        sprayContainer.rotation.x = -Math.PI;\r\n        sprayContainer.add(this.spraySystem);\r\n        this.drone.add(sprayContainer);\r\n        this.spraySystem.position.set(-0.15, 0, 0);\r\n    }\r\n\r\n    // Update spray system; if sprayer is off, remove it.\r\n    private updateSpraySystem(): void {\r\n        if (!this.spraySystem) return;\r\n\r\n        if (!this.isSprayOn) {\r\n            if (this.spraySystem.parent) {\r\n                this.drone?.remove(this.spraySystem.parent);\r\n            }\r\n            this.spraySystem.geometry.dispose();\r\n            (this.spraySystem.material as THREE.PointsMaterial).dispose();\r\n            this.spraySystem = null;\r\n            return;\r\n        }\r\n\r\n        const positions = this.spraySystem.geometry.attributes.position.array as Float32Array;\r\n        const particleCount = positions.length / 3;\r\n        \r\n        for (let i = 0; i < particleCount; i++) {\r\n            const i3 = i * 3;\r\n            positions[i3 + 2] -= 0.3;\r\n            if (positions[i3 + 2] < -10) {\r\n                positions[i3] = (Math.random() - 0.5) * 0.05;\r\n                positions[i3 + 1] = (Math.random() - 0.5) * 0.05;\r\n                positions[i3 + 2] = 0;\r\n            }\r\n            positions[i3] *= 0.99;\r\n            positions[i3 + 1] *= 0.99;\r\n        }\r\n        this.spraySystem.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n\r\n    private updateCameras(): void {\r\n        if (!this.drone) return;\r\n        if (this.cameraMode === 'fpv') {\r\n            const dronePosition = new THREE.Vector3();\r\n            this.drone.getWorldPosition(dronePosition);\r\n            this.fpvCamera.position.copy(dronePosition);\r\n            const offset = new THREE.Vector3(-0.15, 0.20, 0.15);\r\n            offset.applyQuaternion(this.drone.quaternion);\r\n            this.fpvCamera.position.add(offset);\r\n            this.fpvCamera.rotation.set(0, this.drone.rotation.y + Math.PI, 0);\r\n        }\r\n        if (this.cameraMode === 'follow') {\r\n            const dronePosition = new THREE.Vector3();\r\n            this.drone.getWorldPosition(dronePosition);\r\n            const offset = new THREE.Vector3(0, 1.5, -2);\r\n            offset.applyQuaternion(this.drone.quaternion);\r\n            this.followCamera.position.copy(dronePosition).add(offset);\r\n            const forward = new THREE.Vector3(0, 0, 1);\r\n            forward.applyQuaternion(this.drone.quaternion);\r\n            const target = dronePosition.clone().add(forward);\r\n            this.followCamera.lookAt(target);\r\n        }\r\n    }\r\n\r\n    // Added missing checkCollisions method.\r\n    private checkCollisions(): void {\r\n        if (!this.drone) return;\r\n        const dronePosition = new THREE.Vector3();\r\n        this.drone.getWorldPosition(dronePosition);\r\n        const droneSphere = new THREE.Sphere(dronePosition, 0.5);\r\n        for (const building of this.buildings) {\r\n            const buildingMesh = building.getMesh();\r\n            const buildingBox = new THREE.Box3().setFromObject(buildingMesh);\r\n            if (buildingBox.intersectsSphere(droneSphere)) {\r\n                this.showCollisionWarning();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private animate(): void {\r\n        requestAnimationFrame(this.animate.bind(this));\r\n        \r\n        if (!this.gameStarted) {\r\n            // Just render the scene with the start screen\r\n            this.renderer.render(this.scene, this.camera);\r\n            return;\r\n        }\r\n\r\n        const currentTime = performance.now();\r\n        const delta = (currentTime - this.lastFrameTime) / 1000;\r\n        this.lastFrameTime = currentTime;\r\n        \r\n        // Animate propellers.\r\n        if (this.propellers.length > 0) {\r\n            this.propellers.forEach((propeller, index) => {\r\n                const direction = index % 2 === 0 ? 1 : -1;\r\n                propeller.rotation.y += this.propellerSpeed * direction;\r\n            });\r\n        }\r\n        \r\n        // Update systems.\r\n        this.updateDroneMovement(delta);\r\n        if (this.spraySystem) {\r\n            this.updateSpraySystem();\r\n        }\r\n        this.updateCameras();\r\n        this.checkCollisions();\r\n        this.checkLogoCollection();\r\n        \r\n        // Animate logos (rotate and float).\r\n        this.logos.forEach(logo => {\r\n            if (!logo.userData.collected) {\r\n                logo.quaternion.copy(this.activeCamera.quaternion);\r\n                logo.rotateZ(logo.userData.rotationSpeed);\r\n                const floatOffset = Math.sin(currentTime * 0.002) * 0.5;\r\n                logo.position.y = logo.userData.initialY + floatOffset;\r\n            }\r\n        });\r\n        \r\n        this.controls.update();\r\n        this.renderer.render(this.scene, this.activeCamera);\r\n    }\r\n\r\n    private clean(): void {\r\n        if (!this.drone || !this.isSprayOn) return;\r\n        this.buildings.forEach(building => {\r\n            const buildingPos = building.getMesh().position;\r\n            const dronePos = this.drone!.position;\r\n            const distance = new THREE.Vector3(buildingPos.x, buildingPos.y, buildingPos.z).distanceTo(dronePos);\r\n            if (distance < this.cleaningRadius) {\r\n                building.clean(this.cleaningPower);\r\n            }\r\n        });\r\n    }\r\n\r\n    private toggleCamera(): void {\r\n        switch (this.cameraMode) {\r\n            case 'orbit':\r\n                this.cameraMode = 'fpv';\r\n                this.activeCamera = this.fpvCamera;\r\n                this.controls.enabled = false;\r\n                break;\r\n            case 'fpv':\r\n                this.cameraMode = 'follow';\r\n                this.activeCamera = this.followCamera;\r\n                this.controls.enabled = false;\r\n                break;\r\n            case 'follow':\r\n                this.cameraMode = 'orbit';\r\n                this.activeCamera = this.camera;\r\n                this.controls.enabled = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    private createWarningPopup(): void {\r\n        if (!document.getElementById('warning-popup')) {\r\n            const warningElement = document.createElement('div');\r\n            warningElement.id = 'warning-popup';\r\n            warningElement.style.position = 'fixed';\r\n            warningElement.style.top = '50%';\r\n            warningElement.style.left = '50%';\r\n            warningElement.style.transform = 'translate(-50%, -50%)';\r\n            warningElement.style.backgroundColor = 'rgba(255, 200, 200, 0.95)';\r\n            warningElement.style.padding = '20px';\r\n            warningElement.style.borderRadius = '10px';\r\n            warningElement.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';\r\n            warningElement.style.display = 'none';\r\n            warningElement.style.zIndex = '1000';\r\n            warningElement.style.fontFamily = 'Arial, sans-serif';\r\n            warningElement.style.fontSize = '16px';\r\n            warningElement.style.color = '#333';\r\n            warningElement.style.border = '2px solid #ff6b6b';\r\n            warningElement.style.maxWidth = '400px';\r\n            warningElement.style.textAlign = 'center';\r\n            document.body.appendChild(warningElement);\r\n        }\r\n    }\r\n\r\n    private showCollisionWarning(): void {\r\n        const warningElement = document.getElementById('warning-popup');\r\n        if (warningElement && warningElement.style.display !== 'block') {\r\n            warningElement.textContent = \"The Sherpa drone is built with a forward facing collision radar to prevent the drone from drifting into buildings\";\r\n            warningElement.style.display = 'block';\r\n            if (this.warningTimeout !== null) {\r\n                window.clearTimeout(this.warningTimeout);\r\n            }\r\n            this.warningTimeout = window.setTimeout(() => {\r\n                if (warningElement) {\r\n                    warningElement.style.display = 'none';\r\n                }\r\n                this.warningTimeout = null;\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    // New coin collection: check if any spray particle hits a coin.\r\n    private checkLogoCollection(): void {\r\n        if (!this.drone || !this.spraySystem || !this.isSprayOn || this.hasWon) return;\r\n\r\n        const sprayContainer = this.spraySystem.parent;\r\n        if (!sprayContainer) return;\r\n        sprayContainer.updateMatrixWorld();\r\n        const matrixWorld = sprayContainer.matrixWorld;\r\n\r\n        const positions = this.spraySystem.geometry.attributes.position.array as Float32Array;\r\n        const particleCount = positions.length / 3;\r\n        const collisionThreshold = 0.5;\r\n\r\n        this.logos.forEach((logo) => {\r\n            if (!logo.userData.collected) {\r\n                const coinPos = logo.position.clone();\r\n                for (let i = 0; i < particleCount; i++) {\r\n                    const i3 = i * 3;\r\n                    const localParticlePos = new THREE.Vector3(\r\n                        positions[i3],\r\n                        positions[i3 + 1],\r\n                        positions[i3 + 2]\r\n                    );\r\n                    const worldParticlePos = localParticlePos.applyMatrix4(matrixWorld);\r\n                    if (worldParticlePos.distanceTo(coinPos) < collisionThreshold) {\r\n                        logo.userData.collected = true;\r\n                        this.scene.remove(logo);\r\n                        logo.geometry.dispose();\r\n                        if (logo.material instanceof THREE.Material) {\r\n                            logo.material.dispose();\r\n                        }\r\n                        this.score++;\r\n                        this.playCollectionEffect(logo.position.clone());\r\n                        this.updateScoreDisplay();\r\n                        \r\n                        // Show learning popup in learning mode\r\n                        if (this.gameMode === 'learning' && logo.userData.info) {\r\n                            this.showLearningPopup(logo.userData.info);\r\n                        }\r\n                        \r\n                        if (this.score >= 5) {\r\n                            this.showWinMessage();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private playCollectionEffect(position: THREE.Vector3): void {\r\n        const sparkleCount = 50;\r\n        const sparkleGeometry = new THREE.BufferGeometry();\r\n        const sparklePositions = new Float32Array(sparkleCount * 3);\r\n        const sparkleVelocities: THREE.Vector3[] = [];\r\n\r\n        for (let i = 0; i < sparkleCount; i++) {\r\n            const i3 = i * 3;\r\n            sparklePositions[i3] = position.x;\r\n            sparklePositions[i3 + 1] = position.y;\r\n            sparklePositions[i3 + 2] = position.z;\r\n            sparkleVelocities.push(new THREE.Vector3(\r\n                (Math.random() - 0.5) * 2,\r\n                Math.random() * 2,\r\n                (Math.random() - 0.5) * 2\r\n            ));\r\n        }\r\n        sparkleGeometry.setAttribute('position', new THREE.BufferAttribute(sparklePositions, 3));\r\n        const sparkleMaterial = new THREE.PointsMaterial({\r\n            color: 0xffff00,\r\n            size: 0.1,\r\n            transparent: true,\r\n            opacity: 1,\r\n            blending: THREE.AdditiveBlending\r\n        });\r\n        const sparkles = new THREE.Points(sparkleGeometry, sparkleMaterial);\r\n        this.scene.add(sparkles);\r\n\r\n        let lifetime = 0;\r\n        const animateSparkles = () => {\r\n            if (lifetime > 1) {\r\n                this.scene.remove(sparkles);\r\n                sparkleGeometry.dispose();\r\n                sparkleMaterial.dispose();\r\n                return;\r\n            }\r\n            const positions = sparkleGeometry.attributes.position.array as Float32Array;\r\n            for (let i = 0; i < sparkleCount; i++) {\r\n                const i3 = i * 3;\r\n                positions[i3] += sparkleVelocities[i].x * 0.1;\r\n                positions[i3 + 1] += sparkleVelocities[i].y * 0.1;\r\n                positions[i3 + 2] += sparkleVelocities[i].z * 0.1;\r\n            }\r\n            sparkleGeometry.attributes.position.needsUpdate = true;\r\n            sparkleMaterial.opacity = 1 - lifetime;\r\n            lifetime += 0.05;\r\n            requestAnimationFrame(animateSparkles);\r\n        };\r\n        animateSparkles();\r\n    }\r\n\r\n    private updateScoreDisplay(): void {\r\n        const scoreElement = document.getElementById('score-display');\r\n        if (scoreElement) {\r\n            scoreElement.textContent = `Score: ${this.score}/5 Logos Collected!`;\r\n        }\r\n    }\r\n\r\n    private showWinMessage(): void {\r\n        this.hasWon = true;\r\n        const winElement = document.createElement('div');\r\n        winElement.style.position = 'fixed';\r\n        winElement.style.top = '50%';\r\n        winElement.style.left = '50%';\r\n        winElement.style.transform = 'translate(-50%, -50%)';\r\n        winElement.style.backgroundColor = '#00B4D8'; // Lucid Bots blue\r\n        winElement.style.padding = '30px';\r\n        winElement.style.borderRadius = '15px';\r\n        winElement.style.color = 'white';\r\n        winElement.style.fontSize = '24px';\r\n        winElement.style.fontWeight = 'bold';\r\n        winElement.style.textAlign = 'center';\r\n        winElement.style.zIndex = '1000';\r\n        winElement.style.maxWidth = '500px';\r\n\r\n        // Add logo image at the top\r\n        const logoImg = document.createElement('img');\r\n        logoImg.src = import.meta.env.BASE_URL + 'logo.png';\r\n        logoImg.style.width = '120px';\r\n        logoImg.style.marginBottom = '20px';\r\n        winElement.appendChild(logoImg);\r\n\r\n        // Create message container\r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.style.marginBottom = '20px';\r\n        \r\n        let message = 'Congratulations! You\\'ve collected all logos!';\r\n        if (this.gameMode === 'speed') {\r\n            const timerElement = document.getElementById('timer');\r\n            const finalTime = timerElement ? timerElement.textContent?.replace('Time: ', '') : '0:00';\r\n            message += `\\nYour time: ${finalTime}`;\r\n        } else if (this.gameMode === 'learning') {\r\n            // Add the final learning message\r\n            message += '\\n\\nRemember:';\r\n            messageDiv.innerHTML = message + '<br><br>' + \r\n                '\"We believe in responsible robotics, paving the way to better lives for everyone.';\r\n        }\r\n        \r\n        messageDiv.style.lineHeight = '1.4';\r\n        if (this.gameMode === 'speed') {\r\n            messageDiv.textContent = message;\r\n        }\r\n        winElement.appendChild(messageDiv);\r\n\r\n        // Add website link\r\n        const linkDiv = document.createElement('div');\r\n        linkDiv.style.fontSize = '18px';\r\n        linkDiv.style.marginTop = '20px';\r\n        const link = document.createElement('a');\r\n        link.href = 'https://lucidbots.com';\r\n        link.textContent = 'Visit lucidbots.com to learn more!';\r\n        link.style.color = 'white';\r\n        link.style.textDecoration = 'underline';\r\n        link.target = '_blank';\r\n        linkDiv.appendChild(link);\r\n        winElement.appendChild(linkDiv);\r\n\r\n        // Add \"Play Again\" button\r\n        const playAgainButton = document.createElement('button');\r\n        playAgainButton.textContent = 'Play Again';\r\n        playAgainButton.style.marginTop = '20px';\r\n        playAgainButton.style.padding = '10px 20px';\r\n        playAgainButton.style.fontSize = '18px';\r\n        playAgainButton.style.borderRadius = '5px';\r\n        playAgainButton.style.border = 'none';\r\n        playAgainButton.style.backgroundColor = 'white';\r\n        playAgainButton.style.color = '#00B4D8';\r\n        playAgainButton.style.cursor = 'pointer';\r\n        playAgainButton.style.transition = 'transform 0.2s';\r\n        playAgainButton.onmouseover = () => playAgainButton.style.transform = 'scale(1.05)';\r\n        playAgainButton.onmouseout = () => playAgainButton.style.transform = 'scale(1)';\r\n        playAgainButton.onclick = () => window.location.reload();\r\n        winElement.appendChild(playAgainButton);\r\n\r\n        document.body.appendChild(winElement);\r\n\r\n        setTimeout(() => {\r\n            document.body.removeChild(winElement);\r\n        }, 10000);\r\n    }\r\n\r\n    // Create a coin (logo) with glow effect.\r\n    private createLogo(): THREE.Mesh {\r\n        const logoGeometry = new THREE.CircleGeometry(1.5, 32);\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const logoTexture = textureLoader.load(import.meta.env.BASE_URL + 'logo.png');\r\n        logoTexture.minFilter = THREE.LinearFilter;\r\n        logoTexture.magFilter = THREE.LinearFilter;\r\n        \r\n        const logoMaterial = new THREE.MeshStandardMaterial({\r\n            map: logoTexture,\r\n            side: THREE.DoubleSide,\r\n            transparent: true,\r\n            opacity: 1,\r\n            emissive: 0xffffff,\r\n            emissiveMap: logoTexture,\r\n            emissiveIntensity: 0.8\r\n        });\r\n        \r\n        const logo = new THREE.Mesh(logoGeometry, logoMaterial);\r\n        const logoLight = new THREE.PointLight(0xffffff, 1, 5);\r\n        logoLight.position.set(0, 0, 0.1);\r\n        logo.add(logoLight);\r\n        const backLight = new THREE.PointLight(0xffffff, 1, 5);\r\n        backLight.position.set(0, 0, -0.1);\r\n        logo.add(backLight);\r\n        \r\n        logo.userData = { \r\n            collected: false,\r\n            initialY: 0,\r\n            rotationSpeed: 0.02\r\n        };\r\n        return logo;\r\n    }\r\n\r\n    private addLogos(): void {\r\n        const house = this.buildings[0];\r\n        const church = this.buildings[1];\r\n        const tank = this.buildings[2];\r\n        const highrise = this.buildings[3];\r\n        const waterTower = this.buildings[4];\r\n\r\n        const logoPositions = [\r\n            // Lower the house logo position for better visibility\r\n            { building: house, offsetY: 18, offsetX: 0, offsetZ: 0, info: \"Lucid Bots Inc. is an AI robotics company that builds productive and responsible robots for the exterior cleaning, concrete, and construction industries.\" },\r\n            // Church steeple\r\n            { building: church, offsetY: 25, offsetX: 0, offsetZ: 0, info: \"Our drones use advanced AI to learn and navigate complex environments safely.\" },\r\n            // Above silo\r\n            { building: tank, offsetY: 16, offsetX: 0, offsetZ: 0, info: \"Lucid Bots' Sherpa drone could clean any of these buildings in reality as well!\" },\r\n            // Highrise\r\n            { building: highrise, offsetY: 30, offsetX: 0, offsetZ: 4, info: \"Our mission at Lucid Bots is to elevate efficiency, safety, and humanity by creating the world's most productive drones.\" },\r\n            // Water tower\r\n            { building: waterTower, offsetY: 22, offsetX: 0, offsetZ: 0, info: \"We also have a surface cleaning robot, known as the Lavobot\" }\r\n        ];\r\n\r\n        logoPositions.forEach(({ building, offsetY, offsetX, offsetZ, info }) => {\r\n            const buildingPos = building.getMesh().position;\r\n            const logo = this.createLogo();\r\n            logo.position.set(\r\n                buildingPos.x + offsetX,\r\n                buildingPos.y + offsetY,\r\n                buildingPos.z + offsetZ\r\n            );\r\n            logo.userData.initialY = buildingPos.y + offsetY;\r\n            logo.userData.info = info; // Store the info message\r\n            this.logos.push(logo);\r\n            this.scene.add(logo);\r\n        });\r\n    }\r\n\r\n    private showLearningPopup(info: string): void {\r\n        const popupElement = document.createElement('div');\r\n        popupElement.style.position = 'fixed';\r\n        popupElement.style.top = '50%';\r\n        popupElement.style.left = '50%';\r\n        popupElement.style.transform = 'translate(-50%, -50%)';\r\n        popupElement.style.backgroundColor = 'rgba(0, 180, 216, 0.95)'; // Lucid Bots blue\r\n        popupElement.style.padding = '20px';\r\n        popupElement.style.borderRadius = '10px';\r\n        popupElement.style.boxShadow = '0 0 20px rgba(0,0,0,0.3)';\r\n        popupElement.style.color = 'white';\r\n        popupElement.style.fontSize = '18px';\r\n        popupElement.style.fontFamily = 'Arial, sans-serif';\r\n        popupElement.style.textAlign = 'center';\r\n        popupElement.style.maxWidth = '400px';\r\n        popupElement.style.zIndex = '1000';\r\n        popupElement.style.animation = 'fadeIn 0.3s ease-in-out';\r\n\r\n        // Add CSS animation\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes fadeIn {\r\n                from { opacity: 0; transform: translate(-50%, -60%); }\r\n                to { opacity: 1; transform: translate(-50%, -50%); }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        // Add logo image\r\n        const logoImg = document.createElement('img');\r\n        logoImg.src = import.meta.env.BASE_URL + 'logo.png';\r\n        logoImg.style.width = '100px';\r\n        logoImg.style.marginBottom = '15px';\r\n        popupElement.appendChild(logoImg);\r\n\r\n        // Add info text\r\n        const textElement = document.createElement('p');\r\n        textElement.textContent = info;\r\n        textElement.style.margin = '0';\r\n        textElement.style.lineHeight = '1.5';\r\n        popupElement.appendChild(textElement);\r\n\r\n        // Add continue button\r\n        const button = document.createElement('button');\r\n        button.textContent = 'Continue';\r\n        button.style.marginTop = '15px';\r\n        button.style.padding = '8px 20px';\r\n        button.style.fontSize = '16px';\r\n        button.style.backgroundColor = 'white';\r\n        button.style.color = '#00B4D8';\r\n        button.style.border = 'none';\r\n        button.style.borderRadius = '5px';\r\n        button.style.cursor = 'pointer';\r\n        button.style.transition = 'transform 0.2s';\r\n        button.onmouseover = () => button.style.transform = 'scale(1.05)';\r\n        button.onmouseout = () => button.style.transform = 'scale(1)';\r\n        button.onclick = () => document.body.removeChild(popupElement);\r\n        popupElement.appendChild(button);\r\n\r\n        document.body.appendChild(popupElement);\r\n    }\r\n}\r\n\r\n// Start the game\r\nnew Game();"],"names":["Building","constructor","position","_defineProperty","this","getMesh","mesh","clean","amount","dirtyLevel","Math","max","traverse","child","THREE.Mesh","material","THREE.Material","transparent","opacity","getDirtLevel","isClean","ResidentialBuilding","createMesh","mansion","THREE.Group","mainBody","THREE.BoxGeometry","THREE.MeshPhongMaterial","color","foundation","y","leftWing","set","rightWing","clone","mainRoof","letterMaterial","vLeft","rotation","z","PI","vRight","w1","w2","w3","w4","dStem","dCurve","THREE.CylinderGeometry","x","wingRoofGeometry","wingRoofMaterial","leftWingRoof","rightWingRoof","windowGeometry","windowMaterial","frameGeometry","frameMaterial","forEach","pos","index","frame","window","add","entrance","copy","ChurchBuilding","church","body","steepleBase","steepleRoofGeometry","THREE.ConeGeometry","steepleRoof","crossVertical","crossHorizontal","cross","i","leftWindow","rightWindow","roseWindowGeometry","roseWindow","doorFrame","door","steps","roofGeometry","roof","IndustrialTank","silo","cylinderGeometry","siloBody","shininess","coneGeometry","cone","baseRingGeometry","THREE.TorusGeometry","baseRing","topRing","supportGeometry","support","angle","detailGeometry","detail","cos","sin","HighriseBuilding","building","bodyGeometry","bodyMaterial","glassGeometry","THREE.PlaneGeometry","glassMaterial","side","THREE.DoubleSide","frontGlass","backGlass","leftGlass","rightGlass","divider","roofBase","roofDetail","entranceBase","entranceRoof","WaterTower","tower","tankGeometry","tankMaterial","tank","bottomCurveGeometry","THREE.SphereGeometry","bottomCurve","topCurveGeometry","topCurve","roofMaterial","centralColumnGeometry","supportMaterial","centralColumn","height","ring","braceGeometry","brace1","brace2","platformGeometry","platform","railingGeometry","railing","railSupport","sideRailGeometry","leftRail","rightRail","ladderHeight","ladderWidth","rung","performance","now","scene","THREE.Scene","background","THREE.Color","camera","THREE.PerspectiveCamera","innerWidth","innerHeight","fpvCamera","followCamera","activeCamera","renderer","THREE.WebGLRenderer","antialias","alpha","powerPreference","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","type","THREE.PCFSoftShadowMap","outputColorSpace","THREE.SRGBColorSpace","toneMapping","THREE.ACESFilmicToneMapping","toneMappingExposure","document","appendChild","domElement","createStartScreen","controls","OrbitControls","enableDamping","dampingFactor","maxPolarAngle","minDistance","maxDistance","animate","startScreenContainer","createElement","style","top","left","width","backgroundColor","display","flexDirection","alignItems","justifyContent","zIndex","logo","src","marginBottom","buttonsContainer","gap","learningButton","createModeButton","speedButton","title","description","mode","button","padding","borderRadius","cursor","textAlign","transition","titleElement","textContent","margin","fontFamily","descElement","onmouseover","transform","onmouseout","onclick","startGame","gameMode","gameStarted","removeChild","setupLighting","setupControlsUI","loadDroneModel","addBuildings","addGround","addLogos","updateScoreDisplay","createWarningPopup","addEventListener","onWindowResize","bind","onKeyDown","onKeyUp","updateUIForGameMode","infoElement","getElementById","innerHTML","startSpeedModeTimer","startTime","Date","timerElement","updateTimer","hasWon","elapsed","floor","minutes","seconds","toString","padStart","requestAnimationFrame","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","castShadow","shadow","mapSize","near","far","hemisphereLight","THREE.HemisphereLight","id","right","dracoLoader","DRACOLoader","setDecoderPath","loader","GLTFLoader","setDRACOLoader","console","log","load","gltf","droneHolder","THREE.Object3D","droneModel","scale","receiveShadow","name","toLowerCase","includes","propellers","push","droneSpotLight","THREE.SpotLight","penumbra","decay","distance","dronePointLight","THREE.PointLight","drone","dispose","error","progress","percentComplete","round","loaded","total","geometry","fallbackCube","droneLight","house","THREE.Vector3","buildings","highrise","waterTower","groundGeometry","groundMaterial","ground","aspect","updateProjectionMatrix","event","keysPressed","key","isSprayOn","spraySystem","createSpraySystem","toggleCamera","updateDroneMovement","delta","moveX","moveZ","moveY","horizontalMovement","length","normalize","multiplyScalar","applyEuler","THREE.Euler","verticalMovement","newPosition","droneSphere","THREE.Sphere","willCollide","buildingMesh","THREE.Box3","setFromObject","intersectsSphere","showCollisionWarning","particleCount","particles","Float32Array","particleGeometry","THREE.BufferGeometry","spriteMaterial","THREE.PointsMaterial","size","blending","THREE.AdditiveBlending","i3","random","setAttribute","THREE.BufferAttribute","THREE.Points","sprayContainer","updateSpraySystem","_this$drone","parent","remove","positions","attributes","array","needsUpdate","updateCameras","cameraMode","dronePosition","getWorldPosition","offset","applyQuaternion","quaternion","forward","target","lookAt","checkCollisions","render","currentTime","lastFrameTime","propeller","direction","propellerSpeed","checkLogoCollection","logos","userData","collected","rotateZ","rotationSpeed","floatOffset","initialY","update","buildingPos","dronePos","distanceTo","cleaningRadius","cleaningPower","warningElement","boxShadow","fontSize","border","maxWidth","warningTimeout","clearTimeout","setTimeout","updateMatrixWorld","matrixWorld","coinPos","applyMatrix4","score","playCollectionEffect","info","showLearningPopup","showWinMessage","sparkleGeometry","sparklePositions","sparkleCount","sparkleVelocities","sparkleMaterial","sparkles","lifetime","animateSparkles","scoreElement","winElement","fontWeight","logoImg","messageDiv","message","_timerElement$textCon","replace","lineHeight","linkDiv","marginTop","link","href","textDecoration","playAgainButton","location","reload","createLogo","logoGeometry","THREE.CircleGeometry","logoTexture","THREE.TextureLoader","minFilter","THREE.LinearFilter","magFilter","logoMaterial","THREE.MeshStandardMaterial","map","emissive","emissiveMap","emissiveIntensity","logoLight","backLight","offsetY","offsetX","offsetZ","popupElement","animation","head","textElement"],"mappings":"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"}